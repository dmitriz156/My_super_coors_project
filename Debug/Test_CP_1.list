
Test_CP_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  08003ff0  08003ff0  00013ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004da8  08004da8  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08004da8  08004da8  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004da8  08004da8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004da8  08004da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000020  08004dd0  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  08004dd0  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e67b  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e51  00000000  00000000  0002e6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00030518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00031288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178a4  00000000  00000000  00031f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea8e  00000000  00000000  000497ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e98  00000000  00000000  0005827a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2112  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038ac  00000000  00000000  000e2168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fd8 	.word	0x08003fd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08003fd8 	.word	0x08003fd8

0800014c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015a:	2b00      	cmp	r3, #0
 800015c:	db0c      	blt.n	8000178 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 021f 	and.w	r2, r3, #31
 8000164:	4907      	ldr	r1, [pc, #28]	; (8000184 <__NVIC_ClearPendingIRQ+0x38>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	095b      	lsrs	r3, r3, #5
 800016c:	2001      	movs	r0, #1
 800016e:	fa00 f202 	lsl.w	r2, r0, r2
 8000172:	3360      	adds	r3, #96	; 0x60
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000178:	bf00      	nop
 800017a:	370c      	adds	r7, #12
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	e000e100 	.word	0xe000e100

08000188 <ComparePusword>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ComparePusword(){
 8000188:	b480      	push	{r7}
 800018a:	b085      	sub	sp, #20
 800018c:	af00      	add	r7, sp, #0

	for(int i = 0; i <= 3; ++i)
 800018e:	2300      	movs	r3, #0
 8000190:	60fb      	str	r3, [r7, #12]
 8000192:	e023      	b.n	80001dc <ComparePusword+0x54>
	{
		if (pusword[i] != curent_pusword[i])
 8000194:	4a20      	ldr	r2, [pc, #128]	; (8000218 <ComparePusword+0x90>)
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800019c:	491f      	ldr	r1, [pc, #124]	; (800021c <ComparePusword+0x94>)
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001a4:	429a      	cmp	r2, r3
 80001a6:	d016      	beq.n	80001d6 <ComparePusword+0x4e>
		{
			TIM2->CCR1 = 1200;
 80001a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ac:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80001b0:	635a      	str	r2, [r3, #52]	; 0x34
			flag = 0;
 80001b2:	4b1b      	ldr	r3, [pc, #108]	; (8000220 <ComparePusword+0x98>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	801a      	strh	r2, [r3, #0]
			for(int i = 0; i <= 3; ++i)
 80001b8:	2300      	movs	r3, #0
 80001ba:	60bb      	str	r3, [r7, #8]
 80001bc:	e007      	b.n	80001ce <ComparePusword+0x46>
				curent_pusword[i] = 10;
 80001be:	4a17      	ldr	r2, [pc, #92]	; (800021c <ComparePusword+0x94>)
 80001c0:	68bb      	ldr	r3, [r7, #8]
 80001c2:	210a      	movs	r1, #10
 80001c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i <= 3; ++i)
 80001c8:	68bb      	ldr	r3, [r7, #8]
 80001ca:	3301      	adds	r3, #1
 80001cc:	60bb      	str	r3, [r7, #8]
 80001ce:	68bb      	ldr	r3, [r7, #8]
 80001d0:	2b03      	cmp	r3, #3
 80001d2:	ddf4      	ble.n	80001be <ComparePusword+0x36>
			return;
 80001d4:	e01b      	b.n	800020e <ComparePusword+0x86>
	for(int i = 0; i <= 3; ++i)
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	3301      	adds	r3, #1
 80001da:	60fb      	str	r3, [r7, #12]
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	2b03      	cmp	r3, #3
 80001e0:	ddd8      	ble.n	8000194 <ComparePusword+0xc>
		}
	}
	TIM2->CCR1 = 7200;
 80001e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001e6:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80001ea:	635a      	str	r2, [r3, #52]	; 0x34
	flag = 1;
 80001ec:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <ComparePusword+0x98>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= 3; ++i)
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	e007      	b.n	8000208 <ComparePusword+0x80>
		curent_pusword[i] = 10;
 80001f8:	4a08      	ldr	r2, [pc, #32]	; (800021c <ComparePusword+0x94>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	210a      	movs	r1, #10
 80001fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i <= 3; ++i)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	3301      	adds	r3, #1
 8000206:	607b      	str	r3, [r7, #4]
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b03      	cmp	r3, #3
 800020c:	ddf4      	ble.n	80001f8 <ComparePusword+0x70>
}
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	bc80      	pop	{r7}
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	2000000c 	.word	0x2000000c
 800021c:	2000003c 	.word	0x2000003c
 8000220:	20000046 	.word	0x20000046

08000224 <EnterPusword>:

void EnterPusword()
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	if (count > 4)
 8000228:	4b10      	ldr	r3, [pc, #64]	; (800026c <EnterPusword+0x48>)
 800022a:	881b      	ldrh	r3, [r3, #0]
 800022c:	2b04      	cmp	r3, #4
 800022e:	d903      	bls.n	8000238 <EnterPusword+0x14>
		count = 0;
 8000230:	4b0e      	ldr	r3, [pc, #56]	; (800026c <EnterPusword+0x48>)
 8000232:	2200      	movs	r2, #0
 8000234:	801a      	strh	r2, [r3, #0]
		}
		else{
			pusword[count-1] = curentS;
		}
	}
}
 8000236:	e014      	b.n	8000262 <EnterPusword+0x3e>
		if(flag == 0){
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <EnterPusword+0x4c>)
 800023a:	881b      	ldrh	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d108      	bne.n	8000252 <EnterPusword+0x2e>
			curent_pusword[count-1] = curentS;
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <EnterPusword+0x48>)
 8000242:	881b      	ldrh	r3, [r3, #0]
 8000244:	3b01      	subs	r3, #1
 8000246:	4a0b      	ldr	r2, [pc, #44]	; (8000274 <EnterPusword+0x50>)
 8000248:	8811      	ldrh	r1, [r2, #0]
 800024a:	4a0b      	ldr	r2, [pc, #44]	; (8000278 <EnterPusword+0x54>)
 800024c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000250:	e007      	b.n	8000262 <EnterPusword+0x3e>
			pusword[count-1] = curentS;
 8000252:	4b06      	ldr	r3, [pc, #24]	; (800026c <EnterPusword+0x48>)
 8000254:	881b      	ldrh	r3, [r3, #0]
 8000256:	3b01      	subs	r3, #1
 8000258:	4a06      	ldr	r2, [pc, #24]	; (8000274 <EnterPusword+0x50>)
 800025a:	8811      	ldrh	r1, [r2, #0]
 800025c:	4a07      	ldr	r2, [pc, #28]	; (800027c <EnterPusword+0x58>)
 800025e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000262:	bf00      	nop
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	20000044 	.word	0x20000044
 8000270:	20000046 	.word	0x20000046
 8000274:	20000008 	.word	0x20000008
 8000278:	2000003c 	.word	0x2000003c
 800027c:	2000000c 	.word	0x2000000c

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f001 f9dd 	bl	8001644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f935 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 fa4d 	bl	800072c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000292:	f000 f9a5 	bl	80005e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000296:	f000 f9fb 	bl	8000690 <MX_TIM3_Init>
  MX_I2C1_Init();
 800029a:	f000 f973 	bl	8000584 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init (); // initialize the display
 800029e:	f000 fc41 	bl	8000b24 <SSD1306_Init>
  SSD1306_Clear();
 80002a2:	f000 ffaa 	bl	80011fa <SSD1306_Clear>
  SSD1306_GotoXY (10,10); // goto 10, 10
 80002a6:	210a      	movs	r1, #10
 80002a8:	200a      	movs	r0, #10
 80002aa:	f000 fda3 	bl	8000df4 <SSD1306_GotoXY>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80002ae:	2100      	movs	r1, #0
 80002b0:	4881      	ldr	r0, [pc, #516]	; (80004b8 <main+0x238>)
 80002b2:	f002 ffbb 	bl	800322c <HAL_TIM_PWM_Start_IT>
  TIM2->CCR1 = 1200;
 80002b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ba:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80002be:	635a      	str	r2, [r3, #52]	; 0x34

  SSD1306_DrawFilledRectangle(1, 1, 128, 64, 0);
 80002c0:	2300      	movs	r3, #0
 80002c2:	9300      	str	r3, [sp, #0]
 80002c4:	2340      	movs	r3, #64	; 0x40
 80002c6:	2280      	movs	r2, #128	; 0x80
 80002c8:	2101      	movs	r1, #1
 80002ca:	2001      	movs	r0, #1
 80002cc:	f000 ff48 	bl	8001160 <SSD1306_DrawFilledRectangle>
  SSD1306_GotoXY (10, 10); // goto 10, 10
 80002d0:	210a      	movs	r1, #10
 80002d2:	200a      	movs	r0, #10
 80002d4:	f000 fd8e 	bl	8000df4 <SSD1306_GotoXY>
  SSD1306_Puts ("CLOSE", &Font_11x18, 1);
 80002d8:	2201      	movs	r2, #1
 80002da:	4978      	ldr	r1, [pc, #480]	; (80004bc <main+0x23c>)
 80002dc:	4878      	ldr	r0, [pc, #480]	; (80004c0 <main+0x240>)
 80002de:	f000 fe1f 	bl	8000f20 <SSD1306_Puts>

    /* USER CODE BEGIN 3 */



	  EnterPusword();
 80002e2:	f7ff ff9f 	bl	8000224 <EnterPusword>
	  if(flag_enter == 1)
 80002e6:	4b77      	ldr	r3, [pc, #476]	; (80004c4 <main+0x244>)
 80002e8:	881b      	ldrh	r3, [r3, #0]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d104      	bne.n	80002f8 <main+0x78>
	  {
		  ComparePusword();
 80002ee:	f7ff ff4b 	bl	8000188 <ComparePusword>
		  flag_enter = 0;
 80002f2:	4b74      	ldr	r3, [pc, #464]	; (80004c4 <main+0x244>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	801a      	strh	r2, [r3, #0]
	  }
	  if(flag == 1)
 80002f8:	4b73      	ldr	r3, [pc, #460]	; (80004c8 <main+0x248>)
 80002fa:	881b      	ldrh	r3, [r3, #0]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	f040 8083 	bne.w	8000408 <main+0x188>
	  {
		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0){
 8000302:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000306:	4871      	ldr	r0, [pc, #452]	; (80004cc <main+0x24c>)
 8000308:	f001 fcc2 	bl	8001c90 <HAL_GPIO_ReadPin>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d155      	bne.n	80003be <main+0x13e>
			  while (flag_change_pas == 1){
 8000312:	e04f      	b.n	80003b4 <main+0x134>
				  SSD1306_DrawFilledRectangle(1, 1, 128, 64, 0);
 8000314:	2300      	movs	r3, #0
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2340      	movs	r3, #64	; 0x40
 800031a:	2280      	movs	r2, #128	; 0x80
 800031c:	2101      	movs	r1, #1
 800031e:	2001      	movs	r0, #1
 8000320:	f000 ff1e 	bl	8001160 <SSD1306_DrawFilledRectangle>
				  SSD1306_GotoXY (10, 10); // goto 10, 10
 8000324:	210a      	movs	r1, #10
 8000326:	200a      	movs	r0, #10
 8000328:	f000 fd64 	bl	8000df4 <SSD1306_GotoXY>
				  SSD1306_Puts ("CHANGING", &Font_11x18, 1);
 800032c:	2201      	movs	r2, #1
 800032e:	4963      	ldr	r1, [pc, #396]	; (80004bc <main+0x23c>)
 8000330:	4867      	ldr	r0, [pc, #412]	; (80004d0 <main+0x250>)
 8000332:	f000 fdf5 	bl	8000f20 <SSD1306_Puts>
				  SSD1306_GotoXY (10, 30);
 8000336:	211e      	movs	r1, #30
 8000338:	200a      	movs	r0, #10
 800033a:	f000 fd5b 	bl	8000df4 <SSD1306_GotoXY>
				  switch (count)
 800033e:	4b65      	ldr	r3, [pc, #404]	; (80004d4 <main+0x254>)
 8000340:	881b      	ldrh	r3, [r3, #0]
 8000342:	2b04      	cmp	r3, #4
 8000344:	d82a      	bhi.n	800039c <main+0x11c>
 8000346:	a201      	add	r2, pc, #4	; (adr r2, 800034c <main+0xcc>)
 8000348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800034c:	08000361 	.word	0x08000361
 8000350:	0800036d 	.word	0x0800036d
 8000354:	08000379 	.word	0x08000379
 8000358:	08000385 	.word	0x08000385
 800035c:	08000391 	.word	0x08000391
				  {
				  case 0:
					  SSD1306_Puts (" ", &Font_11x18, 1);
 8000360:	2201      	movs	r2, #1
 8000362:	4956      	ldr	r1, [pc, #344]	; (80004bc <main+0x23c>)
 8000364:	485c      	ldr	r0, [pc, #368]	; (80004d8 <main+0x258>)
 8000366:	f000 fddb 	bl	8000f20 <SSD1306_Puts>
					  break;
 800036a:	e017      	b.n	800039c <main+0x11c>
				  case 1:
					  SSD1306_Puts ("#", &Font_11x18, 1);
 800036c:	2201      	movs	r2, #1
 800036e:	4953      	ldr	r1, [pc, #332]	; (80004bc <main+0x23c>)
 8000370:	485a      	ldr	r0, [pc, #360]	; (80004dc <main+0x25c>)
 8000372:	f000 fdd5 	bl	8000f20 <SSD1306_Puts>
					  break;
 8000376:	e011      	b.n	800039c <main+0x11c>
				  case 2:
					  SSD1306_Puts ("##", &Font_11x18, 1);
 8000378:	2201      	movs	r2, #1
 800037a:	4950      	ldr	r1, [pc, #320]	; (80004bc <main+0x23c>)
 800037c:	4858      	ldr	r0, [pc, #352]	; (80004e0 <main+0x260>)
 800037e:	f000 fdcf 	bl	8000f20 <SSD1306_Puts>
					  break;
 8000382:	e00b      	b.n	800039c <main+0x11c>
				  case 3:
					  SSD1306_Puts ("###", &Font_11x18, 1);
 8000384:	2201      	movs	r2, #1
 8000386:	494d      	ldr	r1, [pc, #308]	; (80004bc <main+0x23c>)
 8000388:	4856      	ldr	r0, [pc, #344]	; (80004e4 <main+0x264>)
 800038a:	f000 fdc9 	bl	8000f20 <SSD1306_Puts>
					  break;
 800038e:	e005      	b.n	800039c <main+0x11c>
				  case 4:
					  SSD1306_Puts ("####", &Font_11x18, 1);
 8000390:	2201      	movs	r2, #1
 8000392:	494a      	ldr	r1, [pc, #296]	; (80004bc <main+0x23c>)
 8000394:	4854      	ldr	r0, [pc, #336]	; (80004e8 <main+0x268>)
 8000396:	f000 fdc3 	bl	8000f20 <SSD1306_Puts>
					  break;
 800039a:	bf00      	nop
				  }
				  SSD1306_UpdateScreen();
 800039c:	f000 fc86 	bl	8000cac <SSD1306_UpdateScreen>
				  SSD1306_DrawFilledRectangle(1, 1, 128, 64, 0);
 80003a0:	2300      	movs	r3, #0
 80003a2:	9300      	str	r3, [sp, #0]
 80003a4:	2340      	movs	r3, #64	; 0x40
 80003a6:	2280      	movs	r2, #128	; 0x80
 80003a8:	2101      	movs	r1, #1
 80003aa:	2001      	movs	r0, #1
 80003ac:	f000 fed8 	bl	8001160 <SSD1306_DrawFilledRectangle>

				  //ChangePusword();
				  EnterPusword();
 80003b0:	f7ff ff38 	bl	8000224 <EnterPusword>
			  while (flag_change_pas == 1){
 80003b4:	4b4d      	ldr	r3, [pc, #308]	; (80004ec <main+0x26c>)
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d0ab      	beq.n	8000314 <main+0x94>
 80003bc:	e791      	b.n	80002e2 <main+0x62>
			  }
		  }
		  else{
			  SSD1306_DrawFilledRectangle(1, 1, 128, 64, 0);
 80003be:	2300      	movs	r3, #0
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	2340      	movs	r3, #64	; 0x40
 80003c4:	2280      	movs	r2, #128	; 0x80
 80003c6:	2101      	movs	r1, #1
 80003c8:	2001      	movs	r0, #1
 80003ca:	f000 fec9 	bl	8001160 <SSD1306_DrawFilledRectangle>
			  SSD1306_GotoXY (10, 10); // goto 10, 10
 80003ce:	210a      	movs	r1, #10
 80003d0:	200a      	movs	r0, #10
 80003d2:	f000 fd0f 	bl	8000df4 <SSD1306_GotoXY>
			  SSD1306_Puts ("OPEN", &Font_11x18, 1);
 80003d6:	2201      	movs	r2, #1
 80003d8:	4938      	ldr	r1, [pc, #224]	; (80004bc <main+0x23c>)
 80003da:	4845      	ldr	r0, [pc, #276]	; (80004f0 <main+0x270>)
 80003dc:	f000 fda0 	bl	8000f20 <SSD1306_Puts>
			  SSD1306_GotoXY (10, 30);
 80003e0:	211e      	movs	r1, #30
 80003e2:	200a      	movs	r0, #10
 80003e4:	f000 fd06 	bl	8000df4 <SSD1306_GotoXY>
			  SSD1306_Puts (simbol_pus, &Font_11x18, 1);
 80003e8:	2201      	movs	r2, #1
 80003ea:	4934      	ldr	r1, [pc, #208]	; (80004bc <main+0x23c>)
 80003ec:	4841      	ldr	r0, [pc, #260]	; (80004f4 <main+0x274>)
 80003ee:	f000 fd97 	bl	8000f20 <SSD1306_Puts>
			  SSD1306_UpdateScreen();
 80003f2:	f000 fc5b 	bl	8000cac <SSD1306_UpdateScreen>
			  SSD1306_DrawFilledRectangle(1, 1, 128, 64, 0);
 80003f6:	2300      	movs	r3, #0
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	2340      	movs	r3, #64	; 0x40
 80003fc:	2280      	movs	r2, #128	; 0x80
 80003fe:	2101      	movs	r1, #1
 8000400:	2001      	movs	r0, #1
 8000402:	f000 fead 	bl	8001160 <SSD1306_DrawFilledRectangle>
 8000406:	e76c      	b.n	80002e2 <main+0x62>
		  }

	  	}
	  	else
	  	{
	  		if(flag_change_pas == 1){
 8000408:	4b38      	ldr	r3, [pc, #224]	; (80004ec <main+0x26c>)
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d102      	bne.n	8000416 <main+0x196>
	  			flag_change_pas = 0;
 8000410:	4b36      	ldr	r3, [pc, #216]	; (80004ec <main+0x26c>)
 8000412:	2200      	movs	r2, #0
 8000414:	801a      	strh	r2, [r3, #0]
	  		}
	  		SSD1306_DrawFilledRectangle(1, 1, 128, 64, 0);
 8000416:	2300      	movs	r3, #0
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2340      	movs	r3, #64	; 0x40
 800041c:	2280      	movs	r2, #128	; 0x80
 800041e:	2101      	movs	r1, #1
 8000420:	2001      	movs	r0, #1
 8000422:	f000 fe9d 	bl	8001160 <SSD1306_DrawFilledRectangle>
	  		SSD1306_GotoXY (10, 10); // goto 10, 10
 8000426:	210a      	movs	r1, #10
 8000428:	200a      	movs	r0, #10
 800042a:	f000 fce3 	bl	8000df4 <SSD1306_GotoXY>
	  		SSD1306_Puts ("CLOSE", &Font_11x18, 1);
 800042e:	2201      	movs	r2, #1
 8000430:	4922      	ldr	r1, [pc, #136]	; (80004bc <main+0x23c>)
 8000432:	4823      	ldr	r0, [pc, #140]	; (80004c0 <main+0x240>)
 8000434:	f000 fd74 	bl	8000f20 <SSD1306_Puts>
	  		SSD1306_GotoXY (10, 30);
 8000438:	211e      	movs	r1, #30
 800043a:	200a      	movs	r0, #10
 800043c:	f000 fcda 	bl	8000df4 <SSD1306_GotoXY>
	  		switch (count)
 8000440:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <main+0x254>)
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	2b04      	cmp	r3, #4
 8000446:	d82b      	bhi.n	80004a0 <main+0x220>
 8000448:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <main+0x1d0>)
 800044a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800044e:	bf00      	nop
 8000450:	08000465 	.word	0x08000465
 8000454:	08000471 	.word	0x08000471
 8000458:	0800047d 	.word	0x0800047d
 800045c:	08000489 	.word	0x08000489
 8000460:	08000495 	.word	0x08000495
	  		{
	  		case 0:
	  			SSD1306_Puts (" ", &Font_11x18, 1);
 8000464:	2201      	movs	r2, #1
 8000466:	4915      	ldr	r1, [pc, #84]	; (80004bc <main+0x23c>)
 8000468:	481b      	ldr	r0, [pc, #108]	; (80004d8 <main+0x258>)
 800046a:	f000 fd59 	bl	8000f20 <SSD1306_Puts>
	  			break;
 800046e:	e017      	b.n	80004a0 <main+0x220>
	  		case 1:
	  			SSD1306_Puts ("#", &Font_11x18, 1);
 8000470:	2201      	movs	r2, #1
 8000472:	4912      	ldr	r1, [pc, #72]	; (80004bc <main+0x23c>)
 8000474:	4819      	ldr	r0, [pc, #100]	; (80004dc <main+0x25c>)
 8000476:	f000 fd53 	bl	8000f20 <SSD1306_Puts>
	  			break;
 800047a:	e011      	b.n	80004a0 <main+0x220>
	  		case 2:;
	  			SSD1306_Puts ("##", &Font_11x18, 1);
 800047c:	2201      	movs	r2, #1
 800047e:	490f      	ldr	r1, [pc, #60]	; (80004bc <main+0x23c>)
 8000480:	4817      	ldr	r0, [pc, #92]	; (80004e0 <main+0x260>)
 8000482:	f000 fd4d 	bl	8000f20 <SSD1306_Puts>
	  			break;
 8000486:	e00b      	b.n	80004a0 <main+0x220>
	  		case 3:
	  			SSD1306_Puts ("###", &Font_11x18, 1);
 8000488:	2201      	movs	r2, #1
 800048a:	490c      	ldr	r1, [pc, #48]	; (80004bc <main+0x23c>)
 800048c:	4815      	ldr	r0, [pc, #84]	; (80004e4 <main+0x264>)
 800048e:	f000 fd47 	bl	8000f20 <SSD1306_Puts>
	  			break;
 8000492:	e005      	b.n	80004a0 <main+0x220>
	  		case 4:
	  			SSD1306_Puts ("####", &Font_11x18, 1);
 8000494:	2201      	movs	r2, #1
 8000496:	4909      	ldr	r1, [pc, #36]	; (80004bc <main+0x23c>)
 8000498:	4813      	ldr	r0, [pc, #76]	; (80004e8 <main+0x268>)
 800049a:	f000 fd41 	bl	8000f20 <SSD1306_Puts>
	  			break;
 800049e:	bf00      	nop
	  		}
	  		SSD1306_UpdateScreen();
 80004a0:	f000 fc04 	bl	8000cac <SSD1306_UpdateScreen>
	  		//SSD1306_Clear();
	  		SSD1306_DrawFilledRectangle(1, 1, 128, 64, 0);
 80004a4:	2300      	movs	r3, #0
 80004a6:	9300      	str	r3, [sp, #0]
 80004a8:	2340      	movs	r3, #64	; 0x40
 80004aa:	2280      	movs	r2, #128	; 0x80
 80004ac:	2101      	movs	r1, #1
 80004ae:	2001      	movs	r0, #1
 80004b0:	f000 fe56 	bl	8001160 <SSD1306_DrawFilledRectangle>
	  EnterPusword();
 80004b4:	e715      	b.n	80002e2 <main+0x62>
 80004b6:	bf00      	nop
 80004b8:	200004f4 	.word	0x200004f4
 80004bc:	20000000 	.word	0x20000000
 80004c0:	08003ff0 	.word	0x08003ff0
 80004c4:	20000048 	.word	0x20000048
 80004c8:	20000046 	.word	0x20000046
 80004cc:	40010c00 	.word	0x40010c00
 80004d0:	08003ff8 	.word	0x08003ff8
 80004d4:	20000044 	.word	0x20000044
 80004d8:	08004004 	.word	0x08004004
 80004dc:	08004008 	.word	0x08004008
 80004e0:	0800400c 	.word	0x0800400c
 80004e4:	08004010 	.word	0x08004010
 80004e8:	08004014 	.word	0x08004014
 80004ec:	2000004a 	.word	0x2000004a
 80004f0:	0800401c 	.word	0x0800401c
 80004f4:	200004a8 	.word	0x200004a8

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b090      	sub	sp, #64	; 0x40
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0318 	add.w	r3, r7, #24
 8000502:	2228      	movs	r2, #40	; 0x28
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f003 fd5e 	bl	8003fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800051a:	2301      	movs	r3, #1
 800051c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800051e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000522:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000528:	2301      	movs	r3, #1
 800052a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052c:	2302      	movs	r3, #2
 800052e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000534:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000536:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800053a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053c:	f107 0318 	add.w	r3, r7, #24
 8000540:	4618      	mov	r0, r3
 8000542:	f002 f94d 	bl	80027e0 <HAL_RCC_OscConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800054c:	f000 fae4 	bl	8000b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000550:	230f      	movs	r3, #15
 8000552:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000554:	2302      	movs	r3, #2
 8000556:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800055c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2102      	movs	r1, #2
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fbb8 	bl	8002ce0 <HAL_RCC_ClockConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000576:	f000 facf 	bl	8000b18 <Error_Handler>
  }
}
 800057a:	bf00      	nop
 800057c:	3740      	adds	r7, #64	; 0x40
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <MX_I2C1_Init+0x50>)
 800058a:	4a13      	ldr	r2, [pc, #76]	; (80005d8 <MX_I2C1_Init+0x54>)
 800058c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_I2C1_Init+0x50>)
 8000590:	4a12      	ldr	r2, [pc, #72]	; (80005dc <MX_I2C1_Init+0x58>)
 8000592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_I2C1_Init+0x50>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_I2C1_Init+0x50>)
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_I2C1_Init+0x50>)
 80005a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <MX_I2C1_Init+0x50>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_I2C1_Init+0x50>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <MX_I2C1_Init+0x50>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_I2C1_Init+0x50>)
 80005bc:	2200      	movs	r2, #0
 80005be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <MX_I2C1_Init+0x50>)
 80005c2:	f001 fb95 	bl	8001cf0 <HAL_I2C_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005cc:	f000 faa4 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000454 	.word	0x20000454
 80005d8:	40005400 	.word	0x40005400
 80005dc:	00061a80 	.word	0x00061a80

080005e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
 80005fe:	615a      	str	r2, [r3, #20]
 8000600:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000602:	4b22      	ldr	r3, [pc, #136]	; (800068c <MX_TIM2_Init+0xac>)
 8000604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000608:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 22;
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <MX_TIM2_Init+0xac>)
 800060c:	2216      	movs	r2, #22
 800060e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_TIM2_Init+0xac>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65450;
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_TIM2_Init+0xac>)
 8000618:	f64f 72aa 	movw	r2, #65450	; 0xffaa
 800061c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_TIM2_Init+0xac>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <MX_TIM2_Init+0xac>)
 8000626:	2200      	movs	r2, #0
 8000628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800062a:	4818      	ldr	r0, [pc, #96]	; (800068c <MX_TIM2_Init+0xac>)
 800062c:	f002 fdae 	bl	800318c <HAL_TIM_PWM_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000636:	f000 fa6f 	bl	8000b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800063a:	2300      	movs	r3, #0
 800063c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	4619      	mov	r1, r3
 8000648:	4810      	ldr	r0, [pc, #64]	; (800068c <MX_TIM2_Init+0xac>)
 800064a:	f003 fc29 	bl	8003ea0 <HAL_TIMEx_MasterConfigSynchronization>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000654:	f000 fa60 	bl	8000b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000658:	2360      	movs	r3, #96	; 0x60
 800065a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	4619      	mov	r1, r3
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <MX_TIM2_Init+0xac>)
 8000670:	f002 ffcc 	bl	800360c <HAL_TIM_PWM_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800067a:	f000 fa4d 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800067e:	4803      	ldr	r0, [pc, #12]	; (800068c <MX_TIM2_Init+0xac>)
 8000680:	f000 ff0a 	bl	8001498 <HAL_TIM_MspPostInit>

}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	; 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200004f4 	.word	0x200004f4

08000690 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <MX_TIM3_Init+0x94>)
 80006ae:	4a1e      	ldr	r2, [pc, #120]	; (8000728 <MX_TIM3_Init+0x98>)
 80006b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 22;
 80006b2:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <MX_TIM3_Init+0x94>)
 80006b4:	2216      	movs	r2, #22
 80006b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <MX_TIM3_Init+0x94>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65450;
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <MX_TIM3_Init+0x94>)
 80006c0:	f64f 72aa 	movw	r2, #65450	; 0xffaa
 80006c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <MX_TIM3_Init+0x94>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_TIM3_Init+0x94>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006d2:	4814      	ldr	r0, [pc, #80]	; (8000724 <MX_TIM3_Init+0x94>)
 80006d4:	f002 fc8a 	bl	8002fec <HAL_TIM_Base_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80006de:	f000 fa1b 	bl	8000b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	4619      	mov	r1, r3
 80006ee:	480d      	ldr	r0, [pc, #52]	; (8000724 <MX_TIM3_Init+0x94>)
 80006f0:	f003 f84a 	bl	8003788 <HAL_TIM_ConfigClockSource>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80006fa:	f000 fa0d 	bl	8000b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <MX_TIM3_Init+0x94>)
 800070c:	f003 fbc8 	bl	8003ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000716:	f000 f9ff 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200004ac 	.word	0x200004ac
 8000728:	40000400 	.word	0x40000400

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000740:	4b34      	ldr	r3, [pc, #208]	; (8000814 <MX_GPIO_Init+0xe8>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a33      	ldr	r2, [pc, #204]	; (8000814 <MX_GPIO_Init+0xe8>)
 8000746:	f043 0320 	orr.w	r3, r3, #32
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b31      	ldr	r3, [pc, #196]	; (8000814 <MX_GPIO_Init+0xe8>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0320 	and.w	r3, r3, #32
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000758:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <MX_GPIO_Init+0xe8>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a2d      	ldr	r2, [pc, #180]	; (8000814 <MX_GPIO_Init+0xe8>)
 800075e:	f043 0304 	orr.w	r3, r3, #4
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <MX_GPIO_Init+0xe8>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0304 	and.w	r3, r3, #4
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <MX_GPIO_Init+0xe8>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a27      	ldr	r2, [pc, #156]	; (8000814 <MX_GPIO_Init+0xe8>)
 8000776:	f043 0308 	orr.w	r3, r3, #8
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b25      	ldr	r3, [pc, #148]	; (8000814 <MX_GPIO_Init+0xe8>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0308 	and.w	r3, r3, #8
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA2 PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000788:	f641 7304 	movw	r3, #7940	; 0x1f04
 800078c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <MX_GPIO_Init+0xec>)
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000792:	2301      	movs	r3, #1
 8000794:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	4619      	mov	r1, r3
 800079c:	481f      	ldr	r0, [pc, #124]	; (800081c <MX_GPIO_Init+0xf0>)
 800079e:	f001 f8f3 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80007a2:	f244 03f8 	movw	r3, #16632	; 0x40f8
 80007a6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_GPIO_Init+0xec>)
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	481a      	ldr	r0, [pc, #104]	; (8000820 <MX_GPIO_Init+0xf4>)
 80007b8:	f001 f8e6 	bl	8001988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2100      	movs	r1, #0
 80007c0:	2008      	movs	r0, #8
 80007c2:	f001 f89c 	bl	80018fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007c6:	2008      	movs	r0, #8
 80007c8:	f001 f8b5 	bl	8001936 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2100      	movs	r1, #0
 80007d0:	2009      	movs	r0, #9
 80007d2:	f001 f894 	bl	80018fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80007d6:	2009      	movs	r0, #9
 80007d8:	f001 f8ad 	bl	8001936 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	200a      	movs	r0, #10
 80007e2:	f001 f88c 	bl	80018fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007e6:	200a      	movs	r0, #10
 80007e8:	f001 f8a5 	bl	8001936 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	2017      	movs	r0, #23
 80007f2:	f001 f884 	bl	80018fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007f6:	2017      	movs	r0, #23
 80007f8:	f001 f89d 	bl	8001936 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2028      	movs	r0, #40	; 0x28
 8000802:	f001 f87c 	bl	80018fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000806:	2028      	movs	r0, #40	; 0x28
 8000808:	f001 f895 	bl	8001936 <HAL_NVIC_EnableIRQ>

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40021000 	.word	0x40021000
 8000818:	10210000 	.word	0x10210000
 800081c:	40010800 	.word	0x40010800
 8000820:	40010c00 	.word	0x40010c00

08000824 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

/*штука яка повиннв обробляти переривання*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_6 || GPIO_Pin == GPIO_PIN_5 || GPIO_Pin == GPIO_PIN_4 || GPIO_Pin == GPIO_PIN_3 || GPIO_Pin == GPIO_PIN_2 || GPIO_Pin == GPIO_PIN_12 || GPIO_Pin == GPIO_PIN_11 || GPIO_Pin == GPIO_PIN_10 || GPIO_Pin == GPIO_PIN_9 || GPIO_Pin == GPIO_PIN_8 || GPIO_Pin == GPIO_PIN_7 || GPIO_Pin == GPIO_PIN_14)
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	2b40      	cmp	r3, #64	; 0x40
 8000832:	d026      	beq.n	8000882 <HAL_GPIO_EXTI_Callback+0x5e>
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	2b20      	cmp	r3, #32
 8000838:	d023      	beq.n	8000882 <HAL_GPIO_EXTI_Callback+0x5e>
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	2b10      	cmp	r3, #16
 800083e:	d020      	beq.n	8000882 <HAL_GPIO_EXTI_Callback+0x5e>
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	2b08      	cmp	r3, #8
 8000844:	d01d      	beq.n	8000882 <HAL_GPIO_EXTI_Callback+0x5e>
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	2b04      	cmp	r3, #4
 800084a:	d01a      	beq.n	8000882 <HAL_GPIO_EXTI_Callback+0x5e>
 800084c:	88fb      	ldrh	r3, [r7, #6]
 800084e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000852:	d016      	beq.n	8000882 <HAL_GPIO_EXTI_Callback+0x5e>
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800085a:	d012      	beq.n	8000882 <HAL_GPIO_EXTI_Callback+0x5e>
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000862:	d00e      	beq.n	8000882 <HAL_GPIO_EXTI_Callback+0x5e>
 8000864:	88fb      	ldrh	r3, [r7, #6]
 8000866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800086a:	d00a      	beq.n	8000882 <HAL_GPIO_EXTI_Callback+0x5e>
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000872:	d006      	beq.n	8000882 <HAL_GPIO_EXTI_Callback+0x5e>
 8000874:	88fb      	ldrh	r3, [r7, #6]
 8000876:	2b80      	cmp	r3, #128	; 0x80
 8000878:	d003      	beq.n	8000882 <HAL_GPIO_EXTI_Callback+0x5e>
 800087a:	88fb      	ldrh	r3, [r7, #6]
 800087c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000880:	d111      	bne.n	80008a6 <HAL_GPIO_EXTI_Callback+0x82>
	{
		//flag = 1;
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // сразу же отключаем прерывания на этом пине
 8000882:	2028      	movs	r0, #40	; 0x28
 8000884:	f001 f865 	bl	8001952 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000888:	2017      	movs	r0, #23
 800088a:	f001 f862 	bl	8001952 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 800088e:	200a      	movs	r0, #10
 8000890:	f001 f85f 	bl	8001952 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000894:	2009      	movs	r0, #9
 8000896:	f001 f85c 	bl	8001952 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800089a:	2008      	movs	r0, #8
 800089c:	f001 f859 	bl	8001952 <HAL_NVIC_DisableIRQ>
		// либо выполняем какое-то действие прямо тут, либо поднимаем флажок
		HAL_TIM_Base_Start_IT(&htim3); // запускаем таймер
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x8c>)
 80008a2:	f002 fbf3 	bl	800308c <HAL_TIM_Base_Start_IT>
	} else {
		//flag = 0;
		//__NOP();

	}
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200004ac 	.word	0x200004ac

080008b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a8c      	ldr	r2, [pc, #560]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	f040 8111 	bne.w	8000aea <HAL_TIM_PeriodElapsedCallback+0x236>
	{
		HAL_TIM_Base_Stop_IT(&htim3); // останавливаем таймер
 80008c8:	488b      	ldr	r0, [pc, #556]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80008ca:	f002 fc31 	bl	8003130 <HAL_TIM_Base_Stop_IT>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);  // очищаем бит EXTI_PR (бит прерывания)
 80008ce:	4b8b      	ldr	r3, [pc, #556]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x248>)
 80008d0:	2240      	movs	r2, #64	; 0x40
 80008d2:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 80008d4:	4b89      	ldr	r3, [pc, #548]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x248>)
 80008d6:	2220      	movs	r2, #32
 80008d8:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80008da:	4b88      	ldr	r3, [pc, #544]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x248>)
 80008dc:	2210      	movs	r2, #16
 80008de:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 80008e0:	4b86      	ldr	r3, [pc, #536]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x248>)
 80008e2:	2208      	movs	r2, #8
 80008e4:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 80008e6:	4b85      	ldr	r3, [pc, #532]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x248>)
 80008e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ec:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 80008ee:	4b83      	ldr	r3, [pc, #524]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x248>)
 80008f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008f4:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 80008f6:	4b81      	ldr	r3, [pc, #516]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x248>)
 80008f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008fc:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 80008fe:	4b7f      	ldr	r3, [pc, #508]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000904:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
 8000906:	4b7d      	ldr	r3, [pc, #500]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090c:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 800090e:	4b7b      	ldr	r3, [pc, #492]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000914:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 8000916:	4b79      	ldr	r3, [pc, #484]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 800091c:	4b77      	ldr	r3, [pc, #476]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x248>)
 800091e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000922:	615a      	str	r2, [r3, #20]

		NVIC_ClearPendingIRQ(EXTI15_10_IRQn); // очищаем бит NVIC_ICPRx (бит очереди)
 8000924:	2028      	movs	r0, #40	; 0x28
 8000926:	f7ff fc11 	bl	800014c <__NVIC_ClearPendingIRQ>
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 800092a:	2017      	movs	r0, #23
 800092c:	f7ff fc0e 	bl	800014c <__NVIC_ClearPendingIRQ>
		NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8000930:	200a      	movs	r0, #10
 8000932:	f7ff fc0b 	bl	800014c <__NVIC_ClearPendingIRQ>
		NVIC_ClearPendingIRQ(EXTI3_IRQn);
 8000936:	2009      	movs	r0, #9
 8000938:	f7ff fc08 	bl	800014c <__NVIC_ClearPendingIRQ>
		NVIC_ClearPendingIRQ(EXTI2_IRQn);
 800093c:	2008      	movs	r0, #8
 800093e:	f7ff fc05 	bl	800014c <__NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);   // включаем внешнее прерывание
 8000942:	2028      	movs	r0, #40	; 0x28
 8000944:	f000 fff7 	bl	8001936 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000948:	2017      	movs	r0, #23
 800094a:	f000 fff4 	bl	8001936 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800094e:	200a      	movs	r0, #10
 8000950:	f000 fff1 	bl	8001936 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000954:	2009      	movs	r0, #9
 8000956:	f000 ffee 	bl	8001936 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800095a:	2008      	movs	r0, #8
 800095c:	f000 ffeb 	bl	8001936 <HAL_NVIC_EnableIRQ>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0){
 8000960:	2140      	movs	r1, #64	; 0x40
 8000962:	4867      	ldr	r0, [pc, #412]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000964:	f001 f994 	bl	8001c90 <HAL_GPIO_ReadPin>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d108      	bne.n	8000980 <HAL_TIM_PeriodElapsedCallback+0xcc>
			curentS = 1;
 800096e:	4b65      	ldr	r3, [pc, #404]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000970:	2201      	movs	r2, #1
 8000972:	801a      	strh	r2, [r3, #0]
			count ++;
 8000974:	4b64      	ldr	r3, [pc, #400]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b62      	ldr	r3, [pc, #392]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800097e:	801a      	strh	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 8000980:	2120      	movs	r1, #32
 8000982:	485f      	ldr	r0, [pc, #380]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000984:	f001 f984 	bl	8001c90 <HAL_GPIO_ReadPin>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d108      	bne.n	80009a0 <HAL_TIM_PeriodElapsedCallback+0xec>
			curentS = 2;
 800098e:	4b5d      	ldr	r3, [pc, #372]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000990:	2202      	movs	r2, #2
 8000992:	801a      	strh	r2, [r3, #0]
			count ++;
 8000994:	4b5c      	ldr	r3, [pc, #368]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b5a      	ldr	r3, [pc, #360]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800099e:	801a      	strh	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0){
 80009a0:	2110      	movs	r1, #16
 80009a2:	4857      	ldr	r0, [pc, #348]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80009a4:	f001 f974 	bl	8001c90 <HAL_GPIO_ReadPin>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d108      	bne.n	80009c0 <HAL_TIM_PeriodElapsedCallback+0x10c>
			curentS = 3;
 80009ae:	4b55      	ldr	r3, [pc, #340]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80009b0:	2203      	movs	r2, #3
 80009b2:	801a      	strh	r2, [r3, #0]
			count ++;
 80009b4:	4b54      	ldr	r3, [pc, #336]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b52      	ldr	r3, [pc, #328]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80009be:	801a      	strh	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0){
 80009c0:	2108      	movs	r1, #8
 80009c2:	484f      	ldr	r0, [pc, #316]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80009c4:	f001 f964 	bl	8001c90 <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d108      	bne.n	80009e0 <HAL_TIM_PeriodElapsedCallback+0x12c>
			curentS = 4;
 80009ce:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80009d0:	2204      	movs	r2, #4
 80009d2:	801a      	strh	r2, [r3, #0]
			count ++;
 80009d4:	4b4c      	ldr	r3, [pc, #304]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	b29a      	uxth	r2, r3
 80009dc:	4b4a      	ldr	r3, [pc, #296]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80009de:	801a      	strh	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0){
 80009e0:	2104      	movs	r1, #4
 80009e2:	484a      	ldr	r0, [pc, #296]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x258>)
 80009e4:	f001 f954 	bl	8001c90 <HAL_GPIO_ReadPin>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d108      	bne.n	8000a00 <HAL_TIM_PeriodElapsedCallback+0x14c>
			curentS = 5;
 80009ee:	4b45      	ldr	r3, [pc, #276]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80009f0:	2205      	movs	r2, #5
 80009f2:	801a      	strh	r2, [r3, #0]
			count ++;
 80009f4:	4b44      	ldr	r3, [pc, #272]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b42      	ldr	r3, [pc, #264]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80009fe:	801a      	strh	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 0){
 8000a00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a04:	4841      	ldr	r0, [pc, #260]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000a06:	f001 f943 	bl	8001c90 <HAL_GPIO_ReadPin>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d108      	bne.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x16e>
			curentS = 6;
 8000a10:	4b3c      	ldr	r3, [pc, #240]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000a12:	2206      	movs	r2, #6
 8000a14:	801a      	strh	r2, [r3, #0]
			count ++;
 8000a16:	4b3c      	ldr	r3, [pc, #240]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000a20:	801a      	strh	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0){
 8000a22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a26:	4839      	ldr	r0, [pc, #228]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000a28:	f001 f932 	bl	8001c90 <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d108      	bne.n	8000a44 <HAL_TIM_PeriodElapsedCallback+0x190>
			curentS = 7;
 8000a32:	4b34      	ldr	r3, [pc, #208]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000a34:	2207      	movs	r2, #7
 8000a36:	801a      	strh	r2, [r3, #0]
			count ++;
 8000a38:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	4b31      	ldr	r3, [pc, #196]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000a42:	801a      	strh	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0){
 8000a44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a48:	4830      	ldr	r0, [pc, #192]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000a4a:	f001 f921 	bl	8001c90 <HAL_GPIO_ReadPin>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d108      	bne.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x1b2>
			curentS = 8;
 8000a54:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000a56:	2208      	movs	r2, #8
 8000a58:	801a      	strh	r2, [r3, #0]
			count ++;
 8000a5a:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000a64:	801a      	strh	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0){
 8000a66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6a:	4828      	ldr	r0, [pc, #160]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000a6c:	f001 f910 	bl	8001c90 <HAL_GPIO_ReadPin>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d108      	bne.n	8000a88 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			curentS = 9;
 8000a76:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000a78:	2209      	movs	r2, #9
 8000a7a:	801a      	strh	r2, [r3, #0]
			count ++;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000a86:	801a      	strh	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0){
 8000a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8c:	481f      	ldr	r0, [pc, #124]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000a8e:	f001 f8ff 	bl	8001c90 <HAL_GPIO_ReadPin>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d108      	bne.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x1f6>
			curentS = 0;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	801a      	strh	r2, [r3, #0]
			count ++;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000aa8:	801a      	strh	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0){
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	4814      	ldr	r0, [pc, #80]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000aae:	f001 f8ef 	bl	8001c90 <HAL_GPIO_ReadPin>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d105      	bne.n	8000ac4 <HAL_TIM_PeriodElapsedCallback+0x210>
			flag_enter = 1;
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	801a      	strh	r2, [r3, #0]
			count = 0;
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	801a      	strh	r2, [r3, #0]
		}//enter
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0){
 8000ac4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000aca:	f001 f8e1 	bl	8001c90 <HAL_GPIO_ReadPin>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d10a      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x236>
			if(flag_change_pas == 1){
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d103      	bne.n	8000ae4 <HAL_TIM_PeriodElapsedCallback+0x230>
				flag_change_pas = 0;
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	801a      	strh	r2, [r3, #0]
			else
				flag_change_pas = 1;
		}

	}
}
 8000ae2:	e002      	b.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x236>
				flag_change_pas = 1;
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	801a      	strh	r2, [r3, #0]
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40000400 	.word	0x40000400
 8000af8:	200004ac 	.word	0x200004ac
 8000afc:	40010400 	.word	0x40010400
 8000b00:	40010c00 	.word	0x40010c00
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000044 	.word	0x20000044
 8000b0c:	40010800 	.word	0x40010800
 8000b10:	20000048 	.word	0x20000048
 8000b14:	2000004a 	.word	0x2000004a

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000b2a:	f000 fb6f 	bl	800120c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000b2e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000b32:	2201      	movs	r2, #1
 8000b34:	2178      	movs	r1, #120	; 0x78
 8000b36:	485b      	ldr	r0, [pc, #364]	; (8000ca4 <SSD1306_Init+0x180>)
 8000b38:	f001 fb1c 	bl	8002174 <HAL_I2C_IsDeviceReady>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e0a9      	b.n	8000c9a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000b46:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000b4a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b4c:	e002      	b.n	8000b54 <SSD1306_Init+0x30>
		p--;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1f9      	bne.n	8000b4e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000b5a:	22ae      	movs	r2, #174	; 0xae
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2078      	movs	r0, #120	; 0x78
 8000b60:	f000 fbb0 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000b64:	2220      	movs	r2, #32
 8000b66:	2100      	movs	r1, #0
 8000b68:	2078      	movs	r0, #120	; 0x78
 8000b6a:	f000 fbab 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000b6e:	2210      	movs	r2, #16
 8000b70:	2100      	movs	r1, #0
 8000b72:	2078      	movs	r0, #120	; 0x78
 8000b74:	f000 fba6 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b78:	22b0      	movs	r2, #176	; 0xb0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2078      	movs	r0, #120	; 0x78
 8000b7e:	f000 fba1 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000b82:	22c8      	movs	r2, #200	; 0xc8
 8000b84:	2100      	movs	r1, #0
 8000b86:	2078      	movs	r0, #120	; 0x78
 8000b88:	f000 fb9c 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2078      	movs	r0, #120	; 0x78
 8000b92:	f000 fb97 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000b96:	2210      	movs	r2, #16
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2078      	movs	r0, #120	; 0x78
 8000b9c:	f000 fb92 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ba0:	2240      	movs	r2, #64	; 0x40
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2078      	movs	r0, #120	; 0x78
 8000ba6:	f000 fb8d 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000baa:	2281      	movs	r2, #129	; 0x81
 8000bac:	2100      	movs	r1, #0
 8000bae:	2078      	movs	r0, #120	; 0x78
 8000bb0:	f000 fb88 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000bb4:	22ff      	movs	r2, #255	; 0xff
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2078      	movs	r0, #120	; 0x78
 8000bba:	f000 fb83 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000bbe:	22a1      	movs	r2, #161	; 0xa1
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2078      	movs	r0, #120	; 0x78
 8000bc4:	f000 fb7e 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000bc8:	22a6      	movs	r2, #166	; 0xa6
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2078      	movs	r0, #120	; 0x78
 8000bce:	f000 fb79 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000bd2:	22a8      	movs	r2, #168	; 0xa8
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2078      	movs	r0, #120	; 0x78
 8000bd8:	f000 fb74 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000bdc:	223f      	movs	r2, #63	; 0x3f
 8000bde:	2100      	movs	r1, #0
 8000be0:	2078      	movs	r0, #120	; 0x78
 8000be2:	f000 fb6f 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000be6:	22a4      	movs	r2, #164	; 0xa4
 8000be8:	2100      	movs	r1, #0
 8000bea:	2078      	movs	r0, #120	; 0x78
 8000bec:	f000 fb6a 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000bf0:	22d3      	movs	r2, #211	; 0xd3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2078      	movs	r0, #120	; 0x78
 8000bf6:	f000 fb65 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2078      	movs	r0, #120	; 0x78
 8000c00:	f000 fb60 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c04:	22d5      	movs	r2, #213	; 0xd5
 8000c06:	2100      	movs	r1, #0
 8000c08:	2078      	movs	r0, #120	; 0x78
 8000c0a:	f000 fb5b 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000c0e:	22f0      	movs	r2, #240	; 0xf0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2078      	movs	r0, #120	; 0x78
 8000c14:	f000 fb56 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000c18:	22d9      	movs	r2, #217	; 0xd9
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2078      	movs	r0, #120	; 0x78
 8000c1e:	f000 fb51 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000c22:	2222      	movs	r2, #34	; 0x22
 8000c24:	2100      	movs	r1, #0
 8000c26:	2078      	movs	r0, #120	; 0x78
 8000c28:	f000 fb4c 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000c2c:	22da      	movs	r2, #218	; 0xda
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2078      	movs	r0, #120	; 0x78
 8000c32:	f000 fb47 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000c36:	2212      	movs	r2, #18
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2078      	movs	r0, #120	; 0x78
 8000c3c:	f000 fb42 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000c40:	22db      	movs	r2, #219	; 0xdb
 8000c42:	2100      	movs	r1, #0
 8000c44:	2078      	movs	r0, #120	; 0x78
 8000c46:	f000 fb3d 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000c4a:	2220      	movs	r2, #32
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2078      	movs	r0, #120	; 0x78
 8000c50:	f000 fb38 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000c54:	228d      	movs	r2, #141	; 0x8d
 8000c56:	2100      	movs	r1, #0
 8000c58:	2078      	movs	r0, #120	; 0x78
 8000c5a:	f000 fb33 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000c5e:	2214      	movs	r2, #20
 8000c60:	2100      	movs	r1, #0
 8000c62:	2078      	movs	r0, #120	; 0x78
 8000c64:	f000 fb2e 	bl	80012c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000c68:	22af      	movs	r2, #175	; 0xaf
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2078      	movs	r0, #120	; 0x78
 8000c6e:	f000 fb29 	bl	80012c4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000c72:	222e      	movs	r2, #46	; 0x2e
 8000c74:	2100      	movs	r1, #0
 8000c76:	2078      	movs	r0, #120	; 0x78
 8000c78:	f000 fb24 	bl	80012c4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f000 f843 	bl	8000d08 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000c82:	f000 f813 	bl	8000cac <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <SSD1306_Init+0x184>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SSD1306_Init+0x184>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <SSD1306_Init+0x184>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000c98:	2301      	movs	r3, #1
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000454 	.word	0x20000454
 8000ca8:	2000044c 	.word	0x2000044c

08000cac <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	71fb      	strb	r3, [r7, #7]
 8000cb6:	e01d      	b.n	8000cf4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	3b50      	subs	r3, #80	; 0x50
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2078      	movs	r0, #120	; 0x78
 8000cc4:	f000 fafe 	bl	80012c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2078      	movs	r0, #120	; 0x78
 8000cce:	f000 faf9 	bl	80012c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000cd2:	2210      	movs	r2, #16
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2078      	movs	r0, #120	; 0x78
 8000cd8:	f000 faf4 	bl	80012c4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	01db      	lsls	r3, r3, #7
 8000ce0:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <SSD1306_UpdateScreen+0x58>)
 8000ce2:	441a      	add	r2, r3
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	2140      	movs	r1, #64	; 0x40
 8000ce8:	2078      	movs	r0, #120	; 0x78
 8000cea:	f000 faa3 	bl	8001234 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b07      	cmp	r3, #7
 8000cf8:	d9de      	bls.n	8000cb8 <SSD1306_UpdateScreen+0xc>
	}
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2000004c 	.word	0x2000004c

08000d08 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d101      	bne.n	8000d1c <SSD1306_Fill+0x14>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e000      	b.n	8000d1e <SSD1306_Fill+0x16>
 8000d1c:	23ff      	movs	r3, #255	; 0xff
 8000d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d22:	4619      	mov	r1, r3
 8000d24:	4803      	ldr	r0, [pc, #12]	; (8000d34 <SSD1306_Fill+0x2c>)
 8000d26:	f003 f94f 	bl	8003fc8 <memset>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000004c 	.word	0x2000004c

08000d38 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
 8000d42:	460b      	mov	r3, r1
 8000d44:	80bb      	strh	r3, [r7, #4]
 8000d46:	4613      	mov	r3, r2
 8000d48:	70fb      	strb	r3, [r7, #3]
	if (
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d4e:	d848      	bhi.n	8000de2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000d50:	88bb      	ldrh	r3, [r7, #4]
 8000d52:	2b3f      	cmp	r3, #63	; 0x3f
 8000d54:	d845      	bhi.n	8000de2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000d56:	4b25      	ldr	r3, [pc, #148]	; (8000dec <SSD1306_DrawPixel+0xb4>)
 8000d58:	791b      	ldrb	r3, [r3, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d006      	beq.n	8000d6c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000d5e:	78fb      	ldrb	r3, [r7, #3]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bf0c      	ite	eq
 8000d64:	2301      	moveq	r3, #1
 8000d66:	2300      	movne	r3, #0
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d11a      	bne.n	8000da8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d72:	88fa      	ldrh	r2, [r7, #6]
 8000d74:	88bb      	ldrh	r3, [r7, #4]
 8000d76:	08db      	lsrs	r3, r3, #3
 8000d78:	b298      	uxth	r0, r3
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	01db      	lsls	r3, r3, #7
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <SSD1306_DrawPixel+0xb8>)
 8000d82:	5cd3      	ldrb	r3, [r2, r3]
 8000d84:	b25a      	sxtb	r2, r3
 8000d86:	88bb      	ldrh	r3, [r7, #4]
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b259      	sxtb	r1, r3
 8000d98:	88fa      	ldrh	r2, [r7, #6]
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	01db      	lsls	r3, r3, #7
 8000d9e:	4413      	add	r3, r2
 8000da0:	b2c9      	uxtb	r1, r1
 8000da2:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <SSD1306_DrawPixel+0xb8>)
 8000da4:	54d1      	strb	r1, [r2, r3]
 8000da6:	e01d      	b.n	8000de4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000da8:	88fa      	ldrh	r2, [r7, #6]
 8000daa:	88bb      	ldrh	r3, [r7, #4]
 8000dac:	08db      	lsrs	r3, r3, #3
 8000dae:	b298      	uxth	r0, r3
 8000db0:	4603      	mov	r3, r0
 8000db2:	01db      	lsls	r3, r3, #7
 8000db4:	4413      	add	r3, r2
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <SSD1306_DrawPixel+0xb8>)
 8000db8:	5cd3      	ldrb	r3, [r2, r3]
 8000dba:	b25a      	sxtb	r2, r3
 8000dbc:	88bb      	ldrh	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	4013      	ands	r3, r2
 8000dd0:	b259      	sxtb	r1, r3
 8000dd2:	88fa      	ldrh	r2, [r7, #6]
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	01db      	lsls	r3, r3, #7
 8000dd8:	4413      	add	r3, r2
 8000dda:	b2c9      	uxtb	r1, r1
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <SSD1306_DrawPixel+0xb8>)
 8000dde:	54d1      	strb	r1, [r2, r3]
 8000de0:	e000      	b.n	8000de4 <SSD1306_DrawPixel+0xac>
		return;
 8000de2:	bf00      	nop
	}
}
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	2000044c 	.word	0x2000044c
 8000df0:	2000004c 	.word	0x2000004c

08000df4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	80fb      	strh	r3, [r7, #6]
 8000e00:	4613      	mov	r3, r2
 8000e02:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000e04:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <SSD1306_GotoXY+0x28>)
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <SSD1306_GotoXY+0x28>)
 8000e0c:	88bb      	ldrh	r3, [r7, #4]
 8000e0e:	8053      	strh	r3, [r2, #2]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	2000044c 	.word	0x2000044c

08000e20 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e30:	4b3a      	ldr	r3, [pc, #232]	; (8000f1c <SSD1306_Putc+0xfc>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
	if (
 8000e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e3e:	dc07      	bgt.n	8000e50 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000e40:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <SSD1306_Putc+0xfc>)
 8000e42:	885b      	ldrh	r3, [r3, #2]
 8000e44:	461a      	mov	r2, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	785b      	ldrb	r3, [r3, #1]
 8000e4a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e4c:	2b3f      	cmp	r3, #63	; 0x3f
 8000e4e:	dd01      	ble.n	8000e54 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	e05e      	b.n	8000f12 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e04b      	b.n	8000ef2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	3b20      	subs	r3, #32
 8000e62:	6839      	ldr	r1, [r7, #0]
 8000e64:	7849      	ldrb	r1, [r1, #1]
 8000e66:	fb01 f303 	mul.w	r3, r1, r3
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	440b      	add	r3, r1
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	e030      	b.n	8000ee0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d010      	beq.n	8000eb0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000e8e:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <SSD1306_Putc+0xfc>)
 8000e90:	881a      	ldrh	r2, [r3, #0]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	4413      	add	r3, r2
 8000e98:	b298      	uxth	r0, r3
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <SSD1306_Putc+0xfc>)
 8000e9c:	885a      	ldrh	r2, [r3, #2]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	79ba      	ldrb	r2, [r7, #6]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f7ff ff45 	bl	8000d38 <SSD1306_DrawPixel>
 8000eae:	e014      	b.n	8000eda <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <SSD1306_Putc+0xfc>)
 8000eb2:	881a      	ldrh	r2, [r3, #0]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	4413      	add	r3, r2
 8000eba:	b298      	uxth	r0, r3
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <SSD1306_Putc+0xfc>)
 8000ebe:	885a      	ldrh	r2, [r3, #2]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b299      	uxth	r1, r3
 8000ec8:	79bb      	ldrb	r3, [r7, #6]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	bf0c      	ite	eq
 8000ece:	2301      	moveq	r3, #1
 8000ed0:	2300      	movne	r3, #0
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	f7ff ff2f 	bl	8000d38 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	3301      	adds	r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d3c8      	bcc.n	8000e7e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	785b      	ldrb	r3, [r3, #1]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d3ad      	bcc.n	8000e5a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <SSD1306_Putc+0xfc>)
 8000f00:	881a      	ldrh	r2, [r3, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	4413      	add	r3, r2
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <SSD1306_Putc+0xfc>)
 8000f0e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000044c 	.word	0x2000044c

08000f20 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000f2e:	e012      	b.n	8000f56 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	79fa      	ldrb	r2, [r7, #7]
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff71 	bl	8000e20 <SSD1306_Putc>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d002      	beq.n	8000f50 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	e008      	b.n	8000f62 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3301      	adds	r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1e8      	bne.n	8000f30 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	781b      	ldrb	r3, [r3, #0]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000f6a:	b590      	push	{r4, r7, lr}
 8000f6c:	b087      	sub	sp, #28
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4604      	mov	r4, r0
 8000f72:	4608      	mov	r0, r1
 8000f74:	4611      	mov	r1, r2
 8000f76:	461a      	mov	r2, r3
 8000f78:	4623      	mov	r3, r4
 8000f7a:	80fb      	strh	r3, [r7, #6]
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	80bb      	strh	r3, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	807b      	strh	r3, [r7, #2]
 8000f84:	4613      	mov	r3, r2
 8000f86:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f8c:	d901      	bls.n	8000f92 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000f8e:	237f      	movs	r3, #127	; 0x7f
 8000f90:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	2b7f      	cmp	r3, #127	; 0x7f
 8000f96:	d901      	bls.n	8000f9c <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000f98:	237f      	movs	r3, #127	; 0x7f
 8000f9a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000f9c:	88bb      	ldrh	r3, [r7, #4]
 8000f9e:	2b3f      	cmp	r3, #63	; 0x3f
 8000fa0:	d901      	bls.n	8000fa6 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000fa2:	233f      	movs	r3, #63	; 0x3f
 8000fa4:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000fa6:	883b      	ldrh	r3, [r7, #0]
 8000fa8:	2b3f      	cmp	r3, #63	; 0x3f
 8000faa:	d901      	bls.n	8000fb0 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000fac:	233f      	movs	r3, #63	; 0x3f
 8000fae:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8000fb0:	88fa      	ldrh	r2, [r7, #6]
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d205      	bcs.n	8000fc4 <SSD1306_DrawLine+0x5a>
 8000fb8:	887a      	ldrh	r2, [r7, #2]
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	e004      	b.n	8000fce <SSD1306_DrawLine+0x64>
 8000fc4:	88fa      	ldrh	r2, [r7, #6]
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000fd0:	88ba      	ldrh	r2, [r7, #4]
 8000fd2:	883b      	ldrh	r3, [r7, #0]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d205      	bcs.n	8000fe4 <SSD1306_DrawLine+0x7a>
 8000fd8:	883a      	ldrh	r2, [r7, #0]
 8000fda:	88bb      	ldrh	r3, [r7, #4]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	e004      	b.n	8000fee <SSD1306_DrawLine+0x84>
 8000fe4:	88ba      	ldrh	r2, [r7, #4]
 8000fe6:	883b      	ldrh	r3, [r7, #0]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8000ff0:	88fa      	ldrh	r2, [r7, #6]
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d201      	bcs.n	8000ffc <SSD1306_DrawLine+0x92>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e001      	b.n	8001000 <SSD1306_DrawLine+0x96>
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8001000:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001002:	88ba      	ldrh	r2, [r7, #4]
 8001004:	883b      	ldrh	r3, [r7, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	d201      	bcs.n	800100e <SSD1306_DrawLine+0xa4>
 800100a:	2301      	movs	r3, #1
 800100c:	e001      	b.n	8001012 <SSD1306_DrawLine+0xa8>
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001014:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001018:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	dd06      	ble.n	800102e <SSD1306_DrawLine+0xc4>
 8001020:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001024:	0fda      	lsrs	r2, r3, #31
 8001026:	4413      	add	r3, r2
 8001028:	105b      	asrs	r3, r3, #1
 800102a:	b21b      	sxth	r3, r3
 800102c:	e006      	b.n	800103c <SSD1306_DrawLine+0xd2>
 800102e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001032:	0fda      	lsrs	r2, r3, #31
 8001034:	4413      	add	r3, r2
 8001036:	105b      	asrs	r3, r3, #1
 8001038:	425b      	negs	r3, r3
 800103a:	b21b      	sxth	r3, r3
 800103c:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800103e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d129      	bne.n	800109a <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001046:	883a      	ldrh	r2, [r7, #0]
 8001048:	88bb      	ldrh	r3, [r7, #4]
 800104a:	429a      	cmp	r2, r3
 800104c:	d205      	bcs.n	800105a <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800104e:	883b      	ldrh	r3, [r7, #0]
 8001050:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001052:	88bb      	ldrh	r3, [r7, #4]
 8001054:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001056:	893b      	ldrh	r3, [r7, #8]
 8001058:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	429a      	cmp	r2, r3
 8001060:	d205      	bcs.n	800106e <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800106a:	893b      	ldrh	r3, [r7, #8]
 800106c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800106e:	88bb      	ldrh	r3, [r7, #4]
 8001070:	82bb      	strh	r3, [r7, #20]
 8001072:	e00c      	b.n	800108e <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001074:	8ab9      	ldrh	r1, [r7, #20]
 8001076:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fe5b 	bl	8000d38 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001082:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001086:	b29b      	uxth	r3, r3
 8001088:	3301      	adds	r3, #1
 800108a:	b29b      	uxth	r3, r3
 800108c:	82bb      	strh	r3, [r7, #20]
 800108e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001092:	883b      	ldrh	r3, [r7, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	dded      	ble.n	8001074 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001098:	e05f      	b.n	800115a <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 800109a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d129      	bne.n	80010f6 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80010a2:	883a      	ldrh	r2, [r7, #0]
 80010a4:	88bb      	ldrh	r3, [r7, #4]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d205      	bcs.n	80010b6 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80010aa:	883b      	ldrh	r3, [r7, #0]
 80010ac:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80010ae:	88bb      	ldrh	r3, [r7, #4]
 80010b0:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80010b2:	893b      	ldrh	r3, [r7, #8]
 80010b4:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d205      	bcs.n	80010ca <SSD1306_DrawLine+0x160>
			tmp = x1;
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80010c6:	893b      	ldrh	r3, [r7, #8]
 80010c8:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	82bb      	strh	r3, [r7, #20]
 80010ce:	e00c      	b.n	80010ea <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80010d0:	8abb      	ldrh	r3, [r7, #20]
 80010d2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80010d6:	88b9      	ldrh	r1, [r7, #4]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fe2d 	bl	8000d38 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80010de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	3301      	adds	r3, #1
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	82bb      	strh	r3, [r7, #20]
 80010ea:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dded      	ble.n	80010d0 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80010f4:	e031      	b.n	800115a <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80010f6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80010fa:	88b9      	ldrh	r1, [r7, #4]
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fe1a 	bl	8000d38 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001104:	88fa      	ldrh	r2, [r7, #6]
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	429a      	cmp	r2, r3
 800110a:	d103      	bne.n	8001114 <SSD1306_DrawLine+0x1aa>
 800110c:	88ba      	ldrh	r2, [r7, #4]
 800110e:	883b      	ldrh	r3, [r7, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d021      	beq.n	8001158 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001114:	8afb      	ldrh	r3, [r7, #22]
 8001116:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001118:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800111c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001120:	425b      	negs	r3, r3
 8001122:	429a      	cmp	r2, r3
 8001124:	dd08      	ble.n	8001138 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001126:	8afa      	ldrh	r2, [r7, #22]
 8001128:	8a3b      	ldrh	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	b29b      	uxth	r3, r3
 800112e:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001130:	89fa      	ldrh	r2, [r7, #14]
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	4413      	add	r3, r2
 8001136:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001138:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800113c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	dad8      	bge.n	80010f6 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001144:	8afa      	ldrh	r2, [r7, #22]
 8001146:	8a7b      	ldrh	r3, [r7, #18]
 8001148:	4413      	add	r3, r2
 800114a:	b29b      	uxth	r3, r3
 800114c:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800114e:	89ba      	ldrh	r2, [r7, #12]
 8001150:	88bb      	ldrh	r3, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001156:	e7ce      	b.n	80010f6 <SSD1306_DrawLine+0x18c>
			break;
 8001158:	bf00      	nop
		} 
	}
}
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd90      	pop	{r4, r7, pc}

08001160 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b087      	sub	sp, #28
 8001164:	af02      	add	r7, sp, #8
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	4603      	mov	r3, r0
 8001174:	80bb      	strh	r3, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	807b      	strh	r3, [r7, #2]
 800117a:	4613      	mov	r3, r2
 800117c:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	2b7f      	cmp	r3, #127	; 0x7f
 8001182:	d836      	bhi.n	80011f2 <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001184:	88bb      	ldrh	r3, [r7, #4]
 8001186:	2b3f      	cmp	r3, #63	; 0x3f
 8001188:	d833      	bhi.n	80011f2 <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800118a:	88fa      	ldrh	r2, [r7, #6]
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	4413      	add	r3, r2
 8001190:	2b7f      	cmp	r3, #127	; 0x7f
 8001192:	dd03      	ble.n	800119c <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800119a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800119c:	88ba      	ldrh	r2, [r7, #4]
 800119e:	883b      	ldrh	r3, [r7, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	2b3f      	cmp	r3, #63	; 0x3f
 80011a4:	dd03      	ble.n	80011ae <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80011a6:	88bb      	ldrh	r3, [r7, #4]
 80011a8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80011ac:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	e018      	b.n	80011e6 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	88bb      	ldrh	r3, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	b299      	uxth	r1, r3
 80011be:	88fa      	ldrh	r2, [r7, #6]
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	4413      	add	r3, r2
 80011c4:	b29c      	uxth	r4, r3
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	88bb      	ldrh	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	88f8      	ldrh	r0, [r7, #6]
 80011d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	4613      	mov	r3, r2
 80011da:	4622      	mov	r2, r4
 80011dc:	f7ff fec5 	bl	8000f6a <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	3301      	adds	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	883a      	ldrh	r2, [r7, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d2e1      	bcs.n	80011b4 <SSD1306_DrawFilledRectangle+0x54>
 80011f0:	e000      	b.n	80011f4 <SSD1306_DrawFilledRectangle+0x94>
		return;
 80011f2:	bf00      	nop
	}
}
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}

080011fa <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff fd82 	bl	8000d08 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001204:	f7ff fd52 	bl	8000cac <SSD1306_UpdateScreen>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <ssd1306_I2C_Init+0x24>)
 8001214:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001216:	e002      	b.n	800121e <ssd1306_I2C_Init+0x12>
		p--;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1f9      	bne.n	8001218 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	0003d090 	.word	0x0003d090

08001234 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b0c7      	sub	sp, #284	; 0x11c
 8001238:	af02      	add	r7, sp, #8
 800123a:	4604      	mov	r4, r0
 800123c:	4608      	mov	r0, r1
 800123e:	4639      	mov	r1, r7
 8001240:	600a      	str	r2, [r1, #0]
 8001242:	4619      	mov	r1, r3
 8001244:	1dfb      	adds	r3, r7, #7
 8001246:	4622      	mov	r2, r4
 8001248:	701a      	strb	r2, [r3, #0]
 800124a:	1dbb      	adds	r3, r7, #6
 800124c:	4602      	mov	r2, r0
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	460a      	mov	r2, r1
 8001254:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	1dba      	adds	r2, r7, #6
 800125c:	7812      	ldrb	r2, [r2, #0]
 800125e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001260:	2300      	movs	r3, #0
 8001262:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001266:	e010      	b.n	800128a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001268:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800126c:	463a      	mov	r2, r7
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	441a      	add	r2, r3
 8001272:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001276:	3301      	adds	r3, #1
 8001278:	7811      	ldrb	r1, [r2, #0]
 800127a:	f107 020c 	add.w	r2, r7, #12
 800127e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001280:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001284:	3301      	adds	r3, #1
 8001286:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800128a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800128e:	b29b      	uxth	r3, r3
 8001290:	1d3a      	adds	r2, r7, #4
 8001292:	8812      	ldrh	r2, [r2, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d8e7      	bhi.n	8001268 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001298:	1dfb      	adds	r3, r7, #7
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b299      	uxth	r1, r3
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	f107 020c 	add.w	r2, r7, #12
 80012aa:	200a      	movs	r0, #10
 80012ac:	9000      	str	r0, [sp, #0]
 80012ae:	4804      	ldr	r0, [pc, #16]	; (80012c0 <ssd1306_I2C_WriteMulti+0x8c>)
 80012b0:	f000 fe62 	bl	8001f78 <HAL_I2C_Master_Transmit>
}
 80012b4:	bf00      	nop
 80012b6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000454 	.word	0x20000454

080012c4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
 80012ce:	460b      	mov	r3, r1
 80012d0:	71bb      	strb	r3, [r7, #6]
 80012d2:	4613      	mov	r3, r2
 80012d4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	b299      	uxth	r1, r3
 80012e2:	f107 020c 	add.w	r2, r7, #12
 80012e6:	230a      	movs	r3, #10
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2302      	movs	r3, #2
 80012ec:	4803      	ldr	r0, [pc, #12]	; (80012fc <ssd1306_I2C_Write+0x38>)
 80012ee:	f000 fe43 	bl	8001f78 <HAL_I2C_Master_Transmit>
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000454 	.word	0x20000454

08001300 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_MspInit+0x5c>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	4a14      	ldr	r2, [pc, #80]	; (800135c <HAL_MspInit+0x5c>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6193      	str	r3, [r2, #24]
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_MspInit+0x5c>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_MspInit+0x5c>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <HAL_MspInit+0x5c>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	61d3      	str	r3, [r2, #28]
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <HAL_MspInit+0x5c>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_MspInit+0x60>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_MspInit+0x60>)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000

08001364 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <HAL_I2C_MspInit+0x90>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d132      	bne.n	80013ea <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <HAL_I2C_MspInit+0x94>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <HAL_I2C_MspInit+0x94>)
 800138a:	f043 0308 	orr.w	r3, r3, #8
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <HAL_I2C_MspInit+0x94>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800139c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a2:	2312      	movs	r3, #18
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4812      	ldr	r0, [pc, #72]	; (80013fc <HAL_I2C_MspInit+0x98>)
 80013b2:	f000 fae9 	bl	8001988 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_I2C_MspInit+0x9c>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	f043 0302 	orr.w	r3, r3, #2
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
 80013cc:	4a0c      	ldr	r2, [pc, #48]	; (8001400 <HAL_I2C_MspInit+0x9c>)
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_I2C_MspInit+0x94>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <HAL_I2C_MspInit+0x94>)
 80013d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_I2C_MspInit+0x94>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40005400 	.word	0x40005400
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010c00 	.word	0x40010c00
 8001400:	40010000 	.word	0x40010000

08001404 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001414:	d113      	bne.n	800143e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_TIM_PWM_MspInit+0x44>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <HAL_TIM_PWM_MspInit+0x44>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	61d3      	str	r3, [r2, #28]
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_TIM_PWM_MspInit+0x44>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	201c      	movs	r0, #28
 8001434:	f000 fa63 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001438:	201c      	movs	r0, #28
 800143a:	f000 fa7c 	bl	8001936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <HAL_TIM_Base_MspInit+0x44>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d113      	bne.n	8001486 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_TIM_Base_MspInit+0x48>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4a0c      	ldr	r2, [pc, #48]	; (8001494 <HAL_TIM_Base_MspInit+0x48>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	61d3      	str	r3, [r2, #28]
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_TIM_Base_MspInit+0x48>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	201d      	movs	r0, #29
 800147c:	f000 fa3f 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001480:	201d      	movs	r0, #29
 8001482:	f000 fa58 	bl	8001936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40000400 	.word	0x40000400
 8001494:	40021000 	.word	0x40021000

08001498 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b6:	d117      	bne.n	80014e8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_TIM_MspPostInit+0x58>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <HAL_TIM_MspPostInit+0x58>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_TIM_MspPostInit+0x58>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014d0:	2301      	movs	r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2302      	movs	r3, #2
 80014da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	4619      	mov	r1, r3
 80014e2:	4804      	ldr	r0, [pc, #16]	; (80014f4 <HAL_TIM_MspPostInit+0x5c>)
 80014e4:	f000 fa50 	bl	8001988 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010800 	.word	0x40010800

080014f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <NMI_Handler+0x4>

080014fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <MemManage_Handler+0x4>

0800150a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <UsageFault_Handler+0x4>

08001516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153e:	f000 f8c7 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}

08001546 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800154a:	2004      	movs	r0, #4
 800154c:	f000 fbb8 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001558:	2008      	movs	r0, #8
 800155a:	f000 fbb1 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}

08001562 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001566:	2010      	movs	r0, #16
 8001568:	f000 fbaa 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001574:	2020      	movs	r0, #32
 8001576:	f000 fba3 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800157a:	2040      	movs	r0, #64	; 0x40
 800157c:	f000 fba0 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001580:	2080      	movs	r0, #128	; 0x80
 8001582:	f000 fb9d 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001586:	f44f 7080 	mov.w	r0, #256	; 0x100
 800158a:	f000 fb99 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800158e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001592:	f000 fb95 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <TIM2_IRQHandler+0x10>)
 80015a2:	f001 ff2b 	bl	80033fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200004f4 	.word	0x200004f4

080015b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <TIM3_IRQHandler+0x10>)
 80015b6:	f001 ff21 	bl	80033fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200004ac 	.word	0x200004ac

080015c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80015c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015cc:	f000 fb78 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80015d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80015d4:	f000 fb74 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80015d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015dc:	f000 fb70 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80015e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015e4:	f000 fb6c 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fa:	490d      	ldr	r1, [pc, #52]	; (8001630 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001610:	4c0a      	ldr	r4, [pc, #40]	; (800163c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800161e:	f7ff ffe5 	bl	80015ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001622:	f002 fcad 	bl	8003f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001626:	f7fe fe2b 	bl	8000280 <main>
  bx lr
 800162a:	4770      	bx	lr
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001634:	08004db0 	.word	0x08004db0
  ldr r2, =_sbss
 8001638:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800163c:	20000540 	.word	0x20000540

08001640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC1_2_IRQHandler>
	...

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_Init+0x28>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_Init+0x28>)
 800164e:	f043 0310 	orr.w	r3, r3, #16
 8001652:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001654:	2003      	movs	r0, #3
 8001656:	f000 f947 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165a:	200f      	movs	r0, #15
 800165c:	f000 f808 	bl	8001670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001660:	f7ff fe4e 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40022000 	.word	0x40022000

08001670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_InitTick+0x54>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x58>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001686:	fbb3 f3f1 	udiv	r3, r3, r1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f96d 	bl	800196e <HAL_SYSTICK_Config>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00e      	b.n	80016bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d80a      	bhi.n	80016ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f000 f927 	bl	80018fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <HAL_InitTick+0x5c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000014 	.word	0x20000014
 80016c8:	2000001c 	.word	0x2000001c
 80016cc:	20000018 	.word	0x20000018

080016d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_IncTick+0x1c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_IncTick+0x20>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <HAL_IncTick+0x20>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	2000001c 	.word	0x2000001c
 80016f0:	2000053c 	.word	0x2000053c

080016f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <HAL_GetTick+0x10>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	2000053c 	.word	0x2000053c

08001708 <__NVIC_SetPriorityGrouping>:
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001724:	4013      	ands	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173a:	4a04      	ldr	r2, [pc, #16]	; (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	60d3      	str	r3, [r2, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_GetPriorityGrouping>:
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <__NVIC_GetPriorityGrouping+0x18>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	f003 0307 	and.w	r3, r3, #7
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_EnableIRQ>:
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	db0b      	blt.n	8001796 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	f003 021f 	and.w	r2, r3, #31
 8001784:	4906      	ldr	r1, [pc, #24]	; (80017a0 <__NVIC_EnableIRQ+0x34>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	2001      	movs	r0, #1
 800178e:	fa00 f202 	lsl.w	r2, r0, r2
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100

080017a4 <__NVIC_DisableIRQ>:
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db12      	blt.n	80017dc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 021f 	and.w	r2, r3, #31
 80017bc:	490a      	ldr	r1, [pc, #40]	; (80017e8 <__NVIC_DisableIRQ+0x44>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	2001      	movs	r0, #1
 80017c6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ca:	3320      	adds	r3, #32
 80017cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017d0:	f3bf 8f4f 	dsb	sy
}
 80017d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017d6:	f3bf 8f6f 	isb	sy
}
 80017da:	bf00      	nop
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100

080017ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	; (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <__NVIC_SetPriority+0x50>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
         );
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b4:	d301      	bcc.n	80018ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00f      	b.n	80018da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <SysTick_Config+0x40>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c2:	210f      	movs	r1, #15
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f7ff ff90 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SysTick_Config+0x40>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SysTick_Config+0x40>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff09 	bl	8001708 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001910:	f7ff ff1e 	bl	8001750 <__NVIC_GetPriorityGrouping>
 8001914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f7ff ff90 	bl	8001840 <NVIC_EncodePriority>
 8001920:	4602      	mov	r2, r0
 8001922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff5f 	bl	80017ec <__NVIC_SetPriority>
}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff11 	bl	800176c <__NVIC_EnableIRQ>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff1f 	bl	80017a4 <__NVIC_DisableIRQ>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ff94 	bl	80018a4 <SysTick_Config>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001988:	b480      	push	{r7}
 800198a:	b08b      	sub	sp, #44	; 0x2c
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800199a:	e169      	b.n	8001c70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800199c:	2201      	movs	r2, #1
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f040 8158 	bne.w	8001c6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4a9a      	ldr	r2, [pc, #616]	; (8001c28 <HAL_GPIO_Init+0x2a0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d05e      	beq.n	8001a82 <HAL_GPIO_Init+0xfa>
 80019c4:	4a98      	ldr	r2, [pc, #608]	; (8001c28 <HAL_GPIO_Init+0x2a0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d875      	bhi.n	8001ab6 <HAL_GPIO_Init+0x12e>
 80019ca:	4a98      	ldr	r2, [pc, #608]	; (8001c2c <HAL_GPIO_Init+0x2a4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d058      	beq.n	8001a82 <HAL_GPIO_Init+0xfa>
 80019d0:	4a96      	ldr	r2, [pc, #600]	; (8001c2c <HAL_GPIO_Init+0x2a4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d86f      	bhi.n	8001ab6 <HAL_GPIO_Init+0x12e>
 80019d6:	4a96      	ldr	r2, [pc, #600]	; (8001c30 <HAL_GPIO_Init+0x2a8>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d052      	beq.n	8001a82 <HAL_GPIO_Init+0xfa>
 80019dc:	4a94      	ldr	r2, [pc, #592]	; (8001c30 <HAL_GPIO_Init+0x2a8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d869      	bhi.n	8001ab6 <HAL_GPIO_Init+0x12e>
 80019e2:	4a94      	ldr	r2, [pc, #592]	; (8001c34 <HAL_GPIO_Init+0x2ac>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d04c      	beq.n	8001a82 <HAL_GPIO_Init+0xfa>
 80019e8:	4a92      	ldr	r2, [pc, #584]	; (8001c34 <HAL_GPIO_Init+0x2ac>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d863      	bhi.n	8001ab6 <HAL_GPIO_Init+0x12e>
 80019ee:	4a92      	ldr	r2, [pc, #584]	; (8001c38 <HAL_GPIO_Init+0x2b0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d046      	beq.n	8001a82 <HAL_GPIO_Init+0xfa>
 80019f4:	4a90      	ldr	r2, [pc, #576]	; (8001c38 <HAL_GPIO_Init+0x2b0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d85d      	bhi.n	8001ab6 <HAL_GPIO_Init+0x12e>
 80019fa:	2b12      	cmp	r3, #18
 80019fc:	d82a      	bhi.n	8001a54 <HAL_GPIO_Init+0xcc>
 80019fe:	2b12      	cmp	r3, #18
 8001a00:	d859      	bhi.n	8001ab6 <HAL_GPIO_Init+0x12e>
 8001a02:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <HAL_GPIO_Init+0x80>)
 8001a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a08:	08001a83 	.word	0x08001a83
 8001a0c:	08001a5d 	.word	0x08001a5d
 8001a10:	08001a6f 	.word	0x08001a6f
 8001a14:	08001ab1 	.word	0x08001ab1
 8001a18:	08001ab7 	.word	0x08001ab7
 8001a1c:	08001ab7 	.word	0x08001ab7
 8001a20:	08001ab7 	.word	0x08001ab7
 8001a24:	08001ab7 	.word	0x08001ab7
 8001a28:	08001ab7 	.word	0x08001ab7
 8001a2c:	08001ab7 	.word	0x08001ab7
 8001a30:	08001ab7 	.word	0x08001ab7
 8001a34:	08001ab7 	.word	0x08001ab7
 8001a38:	08001ab7 	.word	0x08001ab7
 8001a3c:	08001ab7 	.word	0x08001ab7
 8001a40:	08001ab7 	.word	0x08001ab7
 8001a44:	08001ab7 	.word	0x08001ab7
 8001a48:	08001ab7 	.word	0x08001ab7
 8001a4c:	08001a65 	.word	0x08001a65
 8001a50:	08001a79 	.word	0x08001a79
 8001a54:	4a79      	ldr	r2, [pc, #484]	; (8001c3c <HAL_GPIO_Init+0x2b4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d013      	beq.n	8001a82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a5a:	e02c      	b.n	8001ab6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	623b      	str	r3, [r7, #32]
          break;
 8001a62:	e029      	b.n	8001ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	623b      	str	r3, [r7, #32]
          break;
 8001a6c:	e024      	b.n	8001ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	3308      	adds	r3, #8
 8001a74:	623b      	str	r3, [r7, #32]
          break;
 8001a76:	e01f      	b.n	8001ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	330c      	adds	r3, #12
 8001a7e:	623b      	str	r3, [r7, #32]
          break;
 8001a80:	e01a      	b.n	8001ab8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	623b      	str	r3, [r7, #32]
          break;
 8001a8e:	e013      	b.n	8001ab8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d105      	bne.n	8001aa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a98:	2308      	movs	r3, #8
 8001a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	611a      	str	r2, [r3, #16]
          break;
 8001aa2:	e009      	b.n	8001ab8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa4:	2308      	movs	r3, #8
 8001aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	615a      	str	r2, [r3, #20]
          break;
 8001aae:	e003      	b.n	8001ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
          break;
 8001ab4:	e000      	b.n	8001ab8 <HAL_GPIO_Init+0x130>
          break;
 8001ab6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2bff      	cmp	r3, #255	; 0xff
 8001abc:	d801      	bhi.n	8001ac2 <HAL_GPIO_Init+0x13a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	e001      	b.n	8001ac6 <HAL_GPIO_Init+0x13e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	2bff      	cmp	r3, #255	; 0xff
 8001acc:	d802      	bhi.n	8001ad4 <HAL_GPIO_Init+0x14c>
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	e002      	b.n	8001ada <HAL_GPIO_Init+0x152>
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	3b08      	subs	r3, #8
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	210f      	movs	r1, #15
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	401a      	ands	r2, r3
 8001aec:	6a39      	ldr	r1, [r7, #32]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	fa01 f303 	lsl.w	r3, r1, r3
 8001af4:	431a      	orrs	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 80b1 	beq.w	8001c6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b08:	4b4d      	ldr	r3, [pc, #308]	; (8001c40 <HAL_GPIO_Init+0x2b8>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a4c      	ldr	r2, [pc, #304]	; (8001c40 <HAL_GPIO_Init+0x2b8>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <HAL_GPIO_Init+0x2b8>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b20:	4a48      	ldr	r2, [pc, #288]	; (8001c44 <HAL_GPIO_Init+0x2bc>)
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a40      	ldr	r2, [pc, #256]	; (8001c48 <HAL_GPIO_Init+0x2c0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d013      	beq.n	8001b74 <HAL_GPIO_Init+0x1ec>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a3f      	ldr	r2, [pc, #252]	; (8001c4c <HAL_GPIO_Init+0x2c4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d00d      	beq.n	8001b70 <HAL_GPIO_Init+0x1e8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a3e      	ldr	r2, [pc, #248]	; (8001c50 <HAL_GPIO_Init+0x2c8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d007      	beq.n	8001b6c <HAL_GPIO_Init+0x1e4>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a3d      	ldr	r2, [pc, #244]	; (8001c54 <HAL_GPIO_Init+0x2cc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d101      	bne.n	8001b68 <HAL_GPIO_Init+0x1e0>
 8001b64:	2303      	movs	r3, #3
 8001b66:	e006      	b.n	8001b76 <HAL_GPIO_Init+0x1ee>
 8001b68:	2304      	movs	r3, #4
 8001b6a:	e004      	b.n	8001b76 <HAL_GPIO_Init+0x1ee>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e002      	b.n	8001b76 <HAL_GPIO_Init+0x1ee>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_GPIO_Init+0x1ee>
 8001b74:	2300      	movs	r3, #0
 8001b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b78:	f002 0203 	and.w	r2, r2, #3
 8001b7c:	0092      	lsls	r2, r2, #2
 8001b7e:	4093      	lsls	r3, r2
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b86:	492f      	ldr	r1, [pc, #188]	; (8001c44 <HAL_GPIO_Init+0x2bc>)
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ba0:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	492c      	ldr	r1, [pc, #176]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bae:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	4928      	ldr	r1, [pc, #160]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	4922      	ldr	r1, [pc, #136]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	491e      	ldr	r1, [pc, #120]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d006      	beq.n	8001bfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	4918      	ldr	r1, [pc, #96]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	608b      	str	r3, [r1, #8]
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	4914      	ldr	r1, [pc, #80]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d021      	beq.n	8001c5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	490e      	ldr	r1, [pc, #56]	; (8001c58 <HAL_GPIO_Init+0x2d0>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60cb      	str	r3, [r1, #12]
 8001c24:	e021      	b.n	8001c6a <HAL_GPIO_Init+0x2e2>
 8001c26:	bf00      	nop
 8001c28:	10320000 	.word	0x10320000
 8001c2c:	10310000 	.word	0x10310000
 8001c30:	10220000 	.word	0x10220000
 8001c34:	10210000 	.word	0x10210000
 8001c38:	10120000 	.word	0x10120000
 8001c3c:	10110000 	.word	0x10110000
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010000 	.word	0x40010000
 8001c48:	40010800 	.word	0x40010800
 8001c4c:	40010c00 	.word	0x40010c00
 8001c50:	40011000 	.word	0x40011000
 8001c54:	40011400 	.word	0x40011400
 8001c58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	4909      	ldr	r1, [pc, #36]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f47f ae8e 	bne.w	800199c <HAL_GPIO_Init+0x14>
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	372c      	adds	r7, #44	; 0x2c
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	40010400 	.word	0x40010400

08001c90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	887b      	ldrh	r3, [r7, #2]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e001      	b.n	8001cb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fda0 	bl	8000824 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40010400 	.word	0x40010400

08001cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e12b      	b.n	8001f5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff fb24 	bl	8001364 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2224      	movs	r2, #36	; 0x24
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d54:	f001 f918 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8001d58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4a81      	ldr	r2, [pc, #516]	; (8001f64 <HAL_I2C_Init+0x274>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d807      	bhi.n	8001d74 <HAL_I2C_Init+0x84>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4a80      	ldr	r2, [pc, #512]	; (8001f68 <HAL_I2C_Init+0x278>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	bf94      	ite	ls
 8001d6c:	2301      	movls	r3, #1
 8001d6e:	2300      	movhi	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	e006      	b.n	8001d82 <HAL_I2C_Init+0x92>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4a7d      	ldr	r2, [pc, #500]	; (8001f6c <HAL_I2C_Init+0x27c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	bf94      	ite	ls
 8001d7c:	2301      	movls	r3, #1
 8001d7e:	2300      	movhi	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0e7      	b.n	8001f5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4a78      	ldr	r2, [pc, #480]	; (8001f70 <HAL_I2C_Init+0x280>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	0c9b      	lsrs	r3, r3, #18
 8001d94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a6a      	ldr	r2, [pc, #424]	; (8001f64 <HAL_I2C_Init+0x274>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d802      	bhi.n	8001dc4 <HAL_I2C_Init+0xd4>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	e009      	b.n	8001dd8 <HAL_I2C_Init+0xe8>
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dca:	fb02 f303 	mul.w	r3, r2, r3
 8001dce:	4a69      	ldr	r2, [pc, #420]	; (8001f74 <HAL_I2C_Init+0x284>)
 8001dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd4:	099b      	lsrs	r3, r3, #6
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	495c      	ldr	r1, [pc, #368]	; (8001f64 <HAL_I2C_Init+0x274>)
 8001df4:	428b      	cmp	r3, r1
 8001df6:	d819      	bhi.n	8001e2c <HAL_I2C_Init+0x13c>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1e59      	subs	r1, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e06:	1c59      	adds	r1, r3, #1
 8001e08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e0c:	400b      	ands	r3, r1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00a      	beq.n	8001e28 <HAL_I2C_Init+0x138>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1e59      	subs	r1, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e20:	3301      	adds	r3, #1
 8001e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e26:	e051      	b.n	8001ecc <HAL_I2C_Init+0x1dc>
 8001e28:	2304      	movs	r3, #4
 8001e2a:	e04f      	b.n	8001ecc <HAL_I2C_Init+0x1dc>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d111      	bne.n	8001e58 <HAL_I2C_Init+0x168>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1e58      	subs	r0, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	440b      	add	r3, r1
 8001e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	e012      	b.n	8001e7e <HAL_I2C_Init+0x18e>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1e58      	subs	r0, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	0099      	lsls	r1, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_Init+0x196>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e022      	b.n	8001ecc <HAL_I2C_Init+0x1dc>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10e      	bne.n	8001eac <HAL_I2C_Init+0x1bc>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1e58      	subs	r0, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6859      	ldr	r1, [r3, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	440b      	add	r3, r1
 8001e9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eaa:	e00f      	b.n	8001ecc <HAL_I2C_Init+0x1dc>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1e58      	subs	r0, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6859      	ldr	r1, [r3, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	0099      	lsls	r1, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	6809      	ldr	r1, [r1, #0]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001efa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6911      	ldr	r1, [r2, #16]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68d2      	ldr	r2, [r2, #12]
 8001f06:	4311      	orrs	r1, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2220      	movs	r2, #32
 8001f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	000186a0 	.word	0x000186a0
 8001f68:	001e847f 	.word	0x001e847f
 8001f6c:	003d08ff 	.word	0x003d08ff
 8001f70:	431bde83 	.word	0x431bde83
 8001f74:	10624dd3 	.word	0x10624dd3

08001f78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	461a      	mov	r2, r3
 8001f84:	460b      	mov	r3, r1
 8001f86:	817b      	strh	r3, [r7, #10]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f8c:	f7ff fbb2 	bl	80016f4 <HAL_GetTick>
 8001f90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	f040 80e0 	bne.w	8002160 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2319      	movs	r3, #25
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4970      	ldr	r1, [pc, #448]	; (800216c <HAL_I2C_Master_Transmit+0x1f4>)
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 fa92 	bl	80024d4 <I2C_WaitOnFlagUntilTimeout>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e0d3      	b.n	8002162 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_I2C_Master_Transmit+0x50>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e0cc      	b.n	8002162 <HAL_I2C_Master_Transmit+0x1ea>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d007      	beq.n	8001fee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ffc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2221      	movs	r2, #33	; 0x21
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2210      	movs	r2, #16
 800200a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	893a      	ldrh	r2, [r7, #8]
 800201e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4a50      	ldr	r2, [pc, #320]	; (8002170 <HAL_I2C_Master_Transmit+0x1f8>)
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002030:	8979      	ldrh	r1, [r7, #10]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	6a3a      	ldr	r2, [r7, #32]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f9ca 	bl	80023d0 <I2C_MasterRequestWrite>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e08d      	b.n	8002162 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800205c:	e066      	b.n	800212c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	6a39      	ldr	r1, [r7, #32]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fb0c 	bl	8002680 <I2C_WaitOnTXEFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00d      	beq.n	800208a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	2b04      	cmp	r3, #4
 8002074:	d107      	bne.n	8002086 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002084:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e06b      	b.n	8002162 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	781a      	ldrb	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d11b      	bne.n	8002100 <HAL_I2C_Master_Transmit+0x188>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d017      	beq.n	8002100 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	781a      	ldrb	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	6a39      	ldr	r1, [r7, #32]
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 fafc 	bl	8002702 <I2C_WaitOnBTFFlagUntilTimeout>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00d      	beq.n	800212c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	2b04      	cmp	r3, #4
 8002116:	d107      	bne.n	8002128 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002126:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e01a      	b.n	8002162 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002130:	2b00      	cmp	r3, #0
 8002132:	d194      	bne.n	800205e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	e000      	b.n	8002162 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002160:	2302      	movs	r3, #2
  }
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	00100002 	.word	0x00100002
 8002170:	ffff0000 	.word	0xffff0000

08002174 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af02      	add	r7, sp, #8
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	460b      	mov	r3, r1
 8002182:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002184:	f7ff fab6 	bl	80016f4 <HAL_GetTick>
 8002188:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800218a:	2301      	movs	r3, #1
 800218c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b20      	cmp	r3, #32
 8002198:	f040 8111 	bne.w	80023be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2319      	movs	r3, #25
 80021a2:	2201      	movs	r2, #1
 80021a4:	4988      	ldr	r1, [pc, #544]	; (80023c8 <HAL_I2C_IsDeviceReady+0x254>)
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f994 	bl	80024d4 <I2C_WaitOnFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80021b2:	2302      	movs	r3, #2
 80021b4:	e104      	b.n	80023c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_I2C_IsDeviceReady+0x50>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e0fd      	b.n	80023c0 <HAL_I2C_IsDeviceReady+0x24c>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d007      	beq.n	80021ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0201 	orr.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2224      	movs	r2, #36	; 0x24
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4a70      	ldr	r2, [pc, #448]	; (80023cc <HAL_I2C_IsDeviceReady+0x258>)
 800220c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800221c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2200      	movs	r2, #0
 8002226:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f952 	bl	80024d4 <I2C_WaitOnFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00d      	beq.n	8002252 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002244:	d103      	bne.n	800224e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0b6      	b.n	80023c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002252:	897b      	ldrh	r3, [r7, #10]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002260:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002262:	f7ff fa47 	bl	80016f4 <HAL_GetTick>
 8002266:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b02      	cmp	r3, #2
 8002274:	bf0c      	ite	eq
 8002276:	2301      	moveq	r3, #1
 8002278:	2300      	movne	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228c:	bf0c      	ite	eq
 800228e:	2301      	moveq	r3, #1
 8002290:	2300      	movne	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002296:	e025      	b.n	80022e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002298:	f7ff fa2c 	bl	80016f4 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d302      	bcc.n	80022ae <HAL_I2C_IsDeviceReady+0x13a>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d103      	bne.n	80022b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	22a0      	movs	r2, #160	; 0xa0
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2ba0      	cmp	r3, #160	; 0xa0
 80022ee:	d005      	beq.n	80022fc <HAL_I2C_IsDeviceReady+0x188>
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d102      	bne.n	80022fc <HAL_I2C_IsDeviceReady+0x188>
 80022f6:	7dbb      	ldrb	r3, [r7, #22]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0cd      	beq.n	8002298 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b02      	cmp	r3, #2
 8002310:	d129      	bne.n	8002366 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002320:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	2319      	movs	r3, #25
 800233e:	2201      	movs	r2, #1
 8002340:	4921      	ldr	r1, [pc, #132]	; (80023c8 <HAL_I2C_IsDeviceReady+0x254>)
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f8c6 	bl	80024d4 <I2C_WaitOnFlagUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e036      	b.n	80023c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	e02c      	b.n	80023c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002374:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800237e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	2319      	movs	r3, #25
 8002386:	2201      	movs	r2, #1
 8002388:	490f      	ldr	r1, [pc, #60]	; (80023c8 <HAL_I2C_IsDeviceReady+0x254>)
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f8a2 	bl	80024d4 <I2C_WaitOnFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e012      	b.n	80023c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	3301      	adds	r3, #1
 800239e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	f4ff af32 	bcc.w	800220e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2220      	movs	r2, #32
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80023be:	2302      	movs	r3, #2
  }
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3720      	adds	r7, #32
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	00100002 	.word	0x00100002
 80023cc:	ffff0000 	.word	0xffff0000

080023d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	460b      	mov	r3, r1
 80023de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d006      	beq.n	80023fa <I2C_MasterRequestWrite+0x2a>
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d003      	beq.n	80023fa <I2C_MasterRequestWrite+0x2a>
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023f8:	d108      	bne.n	800240c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e00b      	b.n	8002424 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	2b12      	cmp	r3, #18
 8002412:	d107      	bne.n	8002424 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002422:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f84f 	bl	80024d4 <I2C_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00d      	beq.n	8002458 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800244a:	d103      	bne.n	8002454 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e035      	b.n	80024c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002460:	d108      	bne.n	8002474 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002462:	897b      	ldrh	r3, [r7, #10]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002470:	611a      	str	r2, [r3, #16]
 8002472:	e01b      	b.n	80024ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002474:	897b      	ldrh	r3, [r7, #10]
 8002476:	11db      	asrs	r3, r3, #7
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f003 0306 	and.w	r3, r3, #6
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f063 030f 	orn	r3, r3, #15
 8002484:	b2da      	uxtb	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	490e      	ldr	r1, [pc, #56]	; (80024cc <I2C_MasterRequestWrite+0xfc>)
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f875 	bl	8002582 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e010      	b.n	80024c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024a2:	897b      	ldrh	r3, [r7, #10]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	4907      	ldr	r1, [pc, #28]	; (80024d0 <I2C_MasterRequestWrite+0x100>)
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f865 	bl	8002582 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	00010008 	.word	0x00010008
 80024d0:	00010002 	.word	0x00010002

080024d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024e4:	e025      	b.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ec:	d021      	beq.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ee:	f7ff f901 	bl	80016f4 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d302      	bcc.n	8002504 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d116      	bne.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f043 0220 	orr.w	r2, r3, #32
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e023      	b.n	800257a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	0c1b      	lsrs	r3, r3, #16
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d10d      	bne.n	8002558 <I2C_WaitOnFlagUntilTimeout+0x84>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4013      	ands	r3, r2
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	bf0c      	ite	eq
 800254e:	2301      	moveq	r3, #1
 8002550:	2300      	movne	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	e00c      	b.n	8002572 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4013      	ands	r3, r2
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	429a      	cmp	r2, r3
 8002576:	d0b6      	beq.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002590:	e051      	b.n	8002636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a0:	d123      	bne.n	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f043 0204 	orr.w	r2, r3, #4
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e046      	b.n	8002678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d021      	beq.n	8002636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f2:	f7ff f87f 	bl	80016f4 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d302      	bcc.n	8002608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d116      	bne.n	8002636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f043 0220 	orr.w	r2, r3, #32
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e020      	b.n	8002678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d10c      	bne.n	800265a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4013      	ands	r3, r2
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	e00b      	b.n	8002672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	43da      	mvns	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4013      	ands	r3, r2
 8002666:	b29b      	uxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d18d      	bne.n	8002592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800268c:	e02d      	b.n	80026ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f878 	bl	8002784 <I2C_IsAcknowledgeFailed>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e02d      	b.n	80026fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d021      	beq.n	80026ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a6:	f7ff f825 	bl	80016f4 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d302      	bcc.n	80026bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d116      	bne.n	80026ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f043 0220 	orr.w	r2, r3, #32
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e007      	b.n	80026fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f4:	2b80      	cmp	r3, #128	; 0x80
 80026f6:	d1ca      	bne.n	800268e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800270e:	e02d      	b.n	800276c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f837 	bl	8002784 <I2C_IsAcknowledgeFailed>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e02d      	b.n	800277c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002726:	d021      	beq.n	800276c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002728:	f7fe ffe4 	bl	80016f4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	429a      	cmp	r2, r3
 8002736:	d302      	bcc.n	800273e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d116      	bne.n	800276c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e007      	b.n	800277c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b04      	cmp	r3, #4
 8002778:	d1ca      	bne.n	8002710 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279a:	d11b      	bne.n	80027d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	f043 0204 	orr.w	r2, r3, #4
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e26c      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8087 	beq.w	800290e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002800:	4b92      	ldr	r3, [pc, #584]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b04      	cmp	r3, #4
 800280a:	d00c      	beq.n	8002826 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800280c:	4b8f      	ldr	r3, [pc, #572]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	d112      	bne.n	800283e <HAL_RCC_OscConfig+0x5e>
 8002818:	4b8c      	ldr	r3, [pc, #560]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002824:	d10b      	bne.n	800283e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002826:	4b89      	ldr	r3, [pc, #548]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d06c      	beq.n	800290c <HAL_RCC_OscConfig+0x12c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d168      	bne.n	800290c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e246      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002846:	d106      	bne.n	8002856 <HAL_RCC_OscConfig+0x76>
 8002848:	4b80      	ldr	r3, [pc, #512]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a7f      	ldr	r2, [pc, #508]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800284e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	e02e      	b.n	80028b4 <HAL_RCC_OscConfig+0xd4>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0x98>
 800285e:	4b7b      	ldr	r3, [pc, #492]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7a      	ldr	r2, [pc, #488]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	4b78      	ldr	r3, [pc, #480]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a77      	ldr	r2, [pc, #476]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e01d      	b.n	80028b4 <HAL_RCC_OscConfig+0xd4>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0xbc>
 8002882:	4b72      	ldr	r3, [pc, #456]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a71      	ldr	r2, [pc, #452]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	4b6f      	ldr	r3, [pc, #444]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6e      	ldr	r2, [pc, #440]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0xd4>
 800289c:	4b6b      	ldr	r3, [pc, #428]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a6a      	ldr	r2, [pc, #424]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80028a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	4b68      	ldr	r3, [pc, #416]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a67      	ldr	r2, [pc, #412]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80028ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d013      	beq.n	80028e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe ff1a 	bl	80016f4 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c4:	f7fe ff16 	bl	80016f4 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e1fa      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d6:	4b5d      	ldr	r3, [pc, #372]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0xe4>
 80028e2:	e014      	b.n	800290e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe ff06 	bl	80016f4 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ec:	f7fe ff02 	bl	80016f4 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1e6      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fe:	4b53      	ldr	r3, [pc, #332]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x10c>
 800290a:	e000      	b.n	800290e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d063      	beq.n	80029e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800291a:	4b4c      	ldr	r3, [pc, #304]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00b      	beq.n	800293e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002926:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b08      	cmp	r3, #8
 8002930:	d11c      	bne.n	800296c <HAL_RCC_OscConfig+0x18c>
 8002932:	4b46      	ldr	r3, [pc, #280]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d116      	bne.n	800296c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293e:	4b43      	ldr	r3, [pc, #268]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_RCC_OscConfig+0x176>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d001      	beq.n	8002956 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e1ba      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002956:	4b3d      	ldr	r3, [pc, #244]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4939      	ldr	r1, [pc, #228]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296a:	e03a      	b.n	80029e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d020      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002974:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <HAL_RCC_OscConfig+0x270>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7fe febb 	bl	80016f4 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002982:	f7fe feb7 	bl	80016f4 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e19b      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002994:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a0:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4927      	ldr	r1, [pc, #156]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]
 80029b4:	e015      	b.n	80029e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b6:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <HAL_RCC_OscConfig+0x270>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7fe fe9a 	bl	80016f4 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c4:	f7fe fe96 	bl	80016f4 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e17a      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d03a      	beq.n	8002a64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d019      	beq.n	8002a2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f6:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <HAL_RCC_OscConfig+0x274>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fc:	f7fe fe7a 	bl	80016f4 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a04:	f7fe fe76 	bl	80016f4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e15a      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a22:	2001      	movs	r0, #1
 8002a24:	f000 fac4 	bl	8002fb0 <RCC_Delay>
 8002a28:	e01c      	b.n	8002a64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a30:	f7fe fe60 	bl	80016f4 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a36:	e00f      	b.n	8002a58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a38:	f7fe fe5c 	bl	80016f4 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d908      	bls.n	8002a58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e140      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	42420000 	.word	0x42420000
 8002a54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a58:	4b9e      	ldr	r3, [pc, #632]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1e9      	bne.n	8002a38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80a6 	beq.w	8002bbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a76:	4b97      	ldr	r3, [pc, #604]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10d      	bne.n	8002a9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	4b94      	ldr	r3, [pc, #592]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4a93      	ldr	r2, [pc, #588]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	61d3      	str	r3, [r2, #28]
 8002a8e:	4b91      	ldr	r3, [pc, #580]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	4b8e      	ldr	r3, [pc, #568]	; (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d118      	bne.n	8002adc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aaa:	4b8b      	ldr	r3, [pc, #556]	; (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a8a      	ldr	r2, [pc, #552]	; (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab6:	f7fe fe1d 	bl	80016f4 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abe:	f7fe fe19 	bl	80016f4 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b64      	cmp	r3, #100	; 0x64
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e0fd      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad0:	4b81      	ldr	r3, [pc, #516]	; (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_OscConfig+0x312>
 8002ae4:	4b7b      	ldr	r3, [pc, #492]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4a7a      	ldr	r2, [pc, #488]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6213      	str	r3, [r2, #32]
 8002af0:	e02d      	b.n	8002b4e <HAL_RCC_OscConfig+0x36e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x334>
 8002afa:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4a75      	ldr	r2, [pc, #468]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	6213      	str	r3, [r2, #32]
 8002b06:	4b73      	ldr	r3, [pc, #460]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4a72      	ldr	r2, [pc, #456]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b0c:	f023 0304 	bic.w	r3, r3, #4
 8002b10:	6213      	str	r3, [r2, #32]
 8002b12:	e01c      	b.n	8002b4e <HAL_RCC_OscConfig+0x36e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d10c      	bne.n	8002b36 <HAL_RCC_OscConfig+0x356>
 8002b1c:	4b6d      	ldr	r3, [pc, #436]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4a6c      	ldr	r2, [pc, #432]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	6213      	str	r3, [r2, #32]
 8002b28:	4b6a      	ldr	r3, [pc, #424]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4a69      	ldr	r2, [pc, #420]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6213      	str	r3, [r2, #32]
 8002b34:	e00b      	b.n	8002b4e <HAL_RCC_OscConfig+0x36e>
 8002b36:	4b67      	ldr	r3, [pc, #412]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	4a66      	ldr	r2, [pc, #408]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	6213      	str	r3, [r2, #32]
 8002b42:	4b64      	ldr	r3, [pc, #400]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4a63      	ldr	r2, [pc, #396]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	f023 0304 	bic.w	r3, r3, #4
 8002b4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d015      	beq.n	8002b82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b56:	f7fe fdcd 	bl	80016f4 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fe fdc9 	bl	80016f4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e0ab      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b74:	4b57      	ldr	r3, [pc, #348]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0ee      	beq.n	8002b5e <HAL_RCC_OscConfig+0x37e>
 8002b80:	e014      	b.n	8002bac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b82:	f7fe fdb7 	bl	80016f4 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7fe fdb3 	bl	80016f4 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e095      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba0:	4b4c      	ldr	r3, [pc, #304]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1ee      	bne.n	8002b8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d105      	bne.n	8002bbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb2:	4b48      	ldr	r3, [pc, #288]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	4a47      	ldr	r2, [pc, #284]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8081 	beq.w	8002cca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc8:	4b42      	ldr	r3, [pc, #264]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d061      	beq.n	8002c98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d146      	bne.n	8002c6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bdc:	4b3f      	ldr	r3, [pc, #252]	; (8002cdc <HAL_RCC_OscConfig+0x4fc>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fe fd87 	bl	80016f4 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bea:	f7fe fd83 	bl	80016f4 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e067      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfc:	4b35      	ldr	r3, [pc, #212]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f0      	bne.n	8002bea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c10:	d108      	bne.n	8002c24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c12:	4b30      	ldr	r3, [pc, #192]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	492d      	ldr	r1, [pc, #180]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c24:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a19      	ldr	r1, [r3, #32]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	430b      	orrs	r3, r1
 8002c36:	4927      	ldr	r1, [pc, #156]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <HAL_RCC_OscConfig+0x4fc>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c42:	f7fe fd57 	bl	80016f4 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4a:	f7fe fd53 	bl	80016f4 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e037      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x46a>
 8002c68:	e02f      	b.n	8002cca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <HAL_RCC_OscConfig+0x4fc>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7fe fd40 	bl	80016f4 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c78:	f7fe fd3c 	bl	80016f4 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e020      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x498>
 8002c96:	e018      	b.n	8002cca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e013      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	42420060 	.word	0x42420060

08002ce0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0d0      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b6a      	ldr	r3, [pc, #424]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d910      	bls.n	8002d24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b67      	ldr	r3, [pc, #412]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 0207 	bic.w	r2, r3, #7
 8002d0a:	4965      	ldr	r1, [pc, #404]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b63      	ldr	r3, [pc, #396]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0b8      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d020      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d3c:	4b59      	ldr	r3, [pc, #356]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a58      	ldr	r2, [pc, #352]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d54:	4b53      	ldr	r3, [pc, #332]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4a52      	ldr	r2, [pc, #328]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d60:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	494d      	ldr	r1, [pc, #308]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d040      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d115      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e07f      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d107      	bne.n	8002dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9e:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e073      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dae:	4b3d      	ldr	r3, [pc, #244]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06b      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dbe:	4b39      	ldr	r3, [pc, #228]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f023 0203 	bic.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4936      	ldr	r1, [pc, #216]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd0:	f7fe fc90 	bl	80016f4 <HAL_GetTick>
 8002dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd8:	f7fe fc8c 	bl	80016f4 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e053      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	4b2d      	ldr	r3, [pc, #180]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 020c 	and.w	r2, r3, #12
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d1eb      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e00:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d210      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 0207 	bic.w	r2, r3, #7
 8002e16:	4922      	ldr	r1, [pc, #136]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e032      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3c:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4916      	ldr	r1, [pc, #88]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	490e      	ldr	r1, [pc, #56]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e6e:	f000 f821 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8002e72:	4602      	mov	r2, r0
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	490a      	ldr	r1, [pc, #40]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	5ccb      	ldrb	r3, [r1, r3]
 8002e82:	fa22 f303 	lsr.w	r3, r2, r3
 8002e86:	4a09      	ldr	r2, [pc, #36]	; (8002eac <HAL_RCC_ClockConfig+0x1cc>)
 8002e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_RCC_ClockConfig+0x1d0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fbee 	bl	8001670 <HAL_InitTick>

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40022000 	.word	0x40022000
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	08004d90 	.word	0x08004d90
 8002eac:	20000014 	.word	0x20000014
 8002eb0:	20000018 	.word	0x20000018

08002eb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb4:	b490      	push	{r4, r7}
 8002eb6:	b08a      	sub	sp, #40	; 0x28
 8002eb8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002eba:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ebc:	1d3c      	adds	r4, r7, #4
 8002ebe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ec4:	f240 2301 	movw	r3, #513	; 0x201
 8002ec8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ede:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d002      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x46>
 8002ef2:	e02d      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ef6:	623b      	str	r3, [r7, #32]
      break;
 8002ef8:	e02d      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	0c9b      	lsrs	r3, r3, #18
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f06:	4413      	add	r3, r2
 8002f08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	0c5b      	lsrs	r3, r3, #17
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f26:	4413      	add	r3, r2
 8002f28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	4a0e      	ldr	r2, [pc, #56]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f32:	fb02 f203 	mul.w	r2, r2, r3
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3e:	e004      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	4a0b      	ldr	r2, [pc, #44]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f44:	fb02 f303 	mul.w	r3, r2, r3
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	623b      	str	r3, [r7, #32]
      break;
 8002f4e:	e002      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f52:	623b      	str	r3, [r7, #32]
      break;
 8002f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f56:	6a3b      	ldr	r3, [r7, #32]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3728      	adds	r7, #40	; 0x28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc90      	pop	{r4, r7}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	08004024 	.word	0x08004024
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	007a1200 	.word	0x007a1200
 8002f70:	003d0900 	.word	0x003d0900

08002f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f78:	4b02      	ldr	r3, [pc, #8]	; (8002f84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	20000014 	.word	0x20000014

08002f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f8c:	f7ff fff2 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4903      	ldr	r1, [pc, #12]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	08004da0 	.word	0x08004da0

08002fb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <RCC_Delay+0x34>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <RCC_Delay+0x38>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	0a5b      	lsrs	r3, r3, #9
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fcc:	bf00      	nop
  }
  while (Delay --);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1e5a      	subs	r2, r3, #1
 8002fd2:	60fa      	str	r2, [r7, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f9      	bne.n	8002fcc <RCC_Delay+0x1c>
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	20000014 	.word	0x20000014
 8002fe8:	10624dd3 	.word	0x10624dd3

08002fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e041      	b.n	8003082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe fa1a 	bl	800144c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f000 fc94 	bl	8003958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d001      	beq.n	80030a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e03a      	b.n	800311a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a18      	ldr	r2, [pc, #96]	; (8003124 <HAL_TIM_Base_Start_IT+0x98>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00e      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x58>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ce:	d009      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x58>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a14      	ldr	r2, [pc, #80]	; (8003128 <HAL_TIM_Base_Start_IT+0x9c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d004      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x58>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a13      	ldr	r2, [pc, #76]	; (800312c <HAL_TIM_Base_Start_IT+0xa0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d111      	bne.n	8003108 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d010      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003106:	e007      	b.n	8003118 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	40012c00 	.word	0x40012c00
 8003128:	40000400 	.word	0x40000400
 800312c:	40000800 	.word	0x40000800

08003130 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6a1a      	ldr	r2, [r3, #32]
 800314e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10f      	bne.n	8003178 <HAL_TIM_Base_Stop_IT+0x48>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6a1a      	ldr	r2, [r3, #32]
 800315e:	f240 4344 	movw	r3, #1092	; 0x444
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d107      	bne.n	8003178 <HAL_TIM_Base_Stop_IT+0x48>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0201 	bic.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e041      	b.n	8003222 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe f926 	bl	8001404 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	4619      	mov	r1, r3
 80031ca:	4610      	mov	r0, r2
 80031cc:	f000 fbc4 	bl	8003958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <HAL_TIM_PWM_Start_IT+0x24>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	bf14      	ite	ne
 8003248:	2301      	movne	r3, #1
 800324a:	2300      	moveq	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	e022      	b.n	8003296 <HAL_TIM_PWM_Start_IT+0x6a>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2b04      	cmp	r3, #4
 8003254:	d109      	bne.n	800326a <HAL_TIM_PWM_Start_IT+0x3e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	bf14      	ite	ne
 8003262:	2301      	movne	r3, #1
 8003264:	2300      	moveq	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	e015      	b.n	8003296 <HAL_TIM_PWM_Start_IT+0x6a>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d109      	bne.n	8003284 <HAL_TIM_PWM_Start_IT+0x58>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e008      	b.n	8003296 <HAL_TIM_PWM_Start_IT+0x6a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e0a4      	b.n	80033e8 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d104      	bne.n	80032ae <HAL_TIM_PWM_Start_IT+0x82>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ac:	e013      	b.n	80032d6 <HAL_TIM_PWM_Start_IT+0xaa>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d104      	bne.n	80032be <HAL_TIM_PWM_Start_IT+0x92>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032bc:	e00b      	b.n	80032d6 <HAL_TIM_PWM_Start_IT+0xaa>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d104      	bne.n	80032ce <HAL_TIM_PWM_Start_IT+0xa2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032cc:	e003      	b.n	80032d6 <HAL_TIM_PWM_Start_IT+0xaa>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b0c      	cmp	r3, #12
 80032da:	d841      	bhi.n	8003360 <HAL_TIM_PWM_Start_IT+0x134>
 80032dc:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <HAL_TIM_PWM_Start_IT+0xb8>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	08003319 	.word	0x08003319
 80032e8:	08003361 	.word	0x08003361
 80032ec:	08003361 	.word	0x08003361
 80032f0:	08003361 	.word	0x08003361
 80032f4:	0800332b 	.word	0x0800332b
 80032f8:	08003361 	.word	0x08003361
 80032fc:	08003361 	.word	0x08003361
 8003300:	08003361 	.word	0x08003361
 8003304:	0800333d 	.word	0x0800333d
 8003308:	08003361 	.word	0x08003361
 800330c:	08003361 	.word	0x08003361
 8003310:	08003361 	.word	0x08003361
 8003314:	0800334f 	.word	0x0800334f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0202 	orr.w	r2, r2, #2
 8003326:	60da      	str	r2, [r3, #12]
      break;
 8003328:	e01b      	b.n	8003362 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0204 	orr.w	r2, r2, #4
 8003338:	60da      	str	r2, [r3, #12]
      break;
 800333a:	e012      	b.n	8003362 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0208 	orr.w	r2, r2, #8
 800334a:	60da      	str	r2, [r3, #12]
      break;
 800334c:	e009      	b.n	8003362 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0210 	orr.w	r2, r2, #16
 800335c:	60da      	str	r2, [r3, #12]
      break;
 800335e:	e000      	b.n	8003362 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8003360:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2201      	movs	r2, #1
 8003368:	6839      	ldr	r1, [r7, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fd74 	bl	8003e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1e      	ldr	r2, [pc, #120]	; (80033f0 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d107      	bne.n	800338a <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003388:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d00e      	beq.n	80033b2 <HAL_TIM_PWM_Start_IT+0x186>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339c:	d009      	beq.n	80033b2 <HAL_TIM_PWM_Start_IT+0x186>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <HAL_TIM_PWM_Start_IT+0x1c8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d004      	beq.n	80033b2 <HAL_TIM_PWM_Start_IT+0x186>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a12      	ldr	r2, [pc, #72]	; (80033f8 <HAL_TIM_PWM_Start_IT+0x1cc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d111      	bne.n	80033d6 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b06      	cmp	r3, #6
 80033c2:	d010      	beq.n	80033e6 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d4:	e007      	b.n	80033e6 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0201 	orr.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40012c00 	.word	0x40012c00
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000800 	.word	0x40000800

080033fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b02      	cmp	r3, #2
 8003410:	d122      	bne.n	8003458 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	d11b      	bne.n	8003458 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0202 	mvn.w	r2, #2
 8003428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fa6f 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 8003444:	e005      	b.n	8003452 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fa62 	bl	8003910 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fa71 	bl	8003934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b04      	cmp	r3, #4
 8003464:	d122      	bne.n	80034ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b04      	cmp	r3, #4
 8003472:	d11b      	bne.n	80034ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0204 	mvn.w	r2, #4
 800347c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa45 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fa38 	bl	8003910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fa47 	bl	8003934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d122      	bne.n	8003500 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d11b      	bne.n	8003500 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0208 	mvn.w	r2, #8
 80034d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2204      	movs	r2, #4
 80034d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fa1b 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 80034ec:	e005      	b.n	80034fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fa0e 	bl	8003910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fa1d 	bl	8003934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b10      	cmp	r3, #16
 800350c:	d122      	bne.n	8003554 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b10      	cmp	r3, #16
 800351a:	d11b      	bne.n	8003554 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0210 	mvn.w	r2, #16
 8003524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2208      	movs	r2, #8
 800352a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f9f1 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 8003540:	e005      	b.n	800354e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9e4 	bl	8003910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f9f3 	bl	8003934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	d10e      	bne.n	8003580 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b01      	cmp	r3, #1
 800356e:	d107      	bne.n	8003580 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0201 	mvn.w	r2, #1
 8003578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fd f99a 	bl	80008b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b80      	cmp	r3, #128	; 0x80
 800358c:	d10e      	bne.n	80035ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d107      	bne.n	80035ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fce1 	bl	8003f6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d10e      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d107      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f9b7 	bl	8003946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d10e      	bne.n	8003604 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d107      	bne.n	8003604 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0220 	mvn.w	r2, #32
 80035fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fcac 	bl	8003f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003622:	2302      	movs	r3, #2
 8003624:	e0ac      	b.n	8003780 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b0c      	cmp	r3, #12
 8003632:	f200 809f 	bhi.w	8003774 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003636:	a201      	add	r2, pc, #4	; (adr r2, 800363c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363c:	08003671 	.word	0x08003671
 8003640:	08003775 	.word	0x08003775
 8003644:	08003775 	.word	0x08003775
 8003648:	08003775 	.word	0x08003775
 800364c:	080036b1 	.word	0x080036b1
 8003650:	08003775 	.word	0x08003775
 8003654:	08003775 	.word	0x08003775
 8003658:	08003775 	.word	0x08003775
 800365c:	080036f3 	.word	0x080036f3
 8003660:	08003775 	.word	0x08003775
 8003664:	08003775 	.word	0x08003775
 8003668:	08003775 	.word	0x08003775
 800366c:	08003733 	.word	0x08003733
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f9d0 	bl	8003a1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0208 	orr.w	r2, r2, #8
 800368a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0204 	bic.w	r2, r2, #4
 800369a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6999      	ldr	r1, [r3, #24]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	619a      	str	r2, [r3, #24]
      break;
 80036ae:	e062      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fa16 	bl	8003ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6999      	ldr	r1, [r3, #24]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	021a      	lsls	r2, r3, #8
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	619a      	str	r2, [r3, #24]
      break;
 80036f0:	e041      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fa5f 	bl	8003bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69da      	ldr	r2, [r3, #28]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0208 	orr.w	r2, r2, #8
 800370c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0204 	bic.w	r2, r2, #4
 800371c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69d9      	ldr	r1, [r3, #28]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	61da      	str	r2, [r3, #28]
      break;
 8003730:	e021      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	4618      	mov	r0, r3
 800373a:	f000 faa9 	bl	8003c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69da      	ldr	r2, [r3, #28]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800374c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69d9      	ldr	r1, [r3, #28]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	021a      	lsls	r2, r3, #8
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	61da      	str	r2, [r3, #28]
      break;
 8003772:	e000      	b.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003774:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_TIM_ConfigClockSource+0x18>
 800379c:	2302      	movs	r3, #2
 800379e:	e0b3      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x180>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d8:	d03e      	beq.n	8003858 <HAL_TIM_ConfigClockSource+0xd0>
 80037da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037de:	f200 8087 	bhi.w	80038f0 <HAL_TIM_ConfigClockSource+0x168>
 80037e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e6:	f000 8085 	beq.w	80038f4 <HAL_TIM_ConfigClockSource+0x16c>
 80037ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ee:	d87f      	bhi.n	80038f0 <HAL_TIM_ConfigClockSource+0x168>
 80037f0:	2b70      	cmp	r3, #112	; 0x70
 80037f2:	d01a      	beq.n	800382a <HAL_TIM_ConfigClockSource+0xa2>
 80037f4:	2b70      	cmp	r3, #112	; 0x70
 80037f6:	d87b      	bhi.n	80038f0 <HAL_TIM_ConfigClockSource+0x168>
 80037f8:	2b60      	cmp	r3, #96	; 0x60
 80037fa:	d050      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x116>
 80037fc:	2b60      	cmp	r3, #96	; 0x60
 80037fe:	d877      	bhi.n	80038f0 <HAL_TIM_ConfigClockSource+0x168>
 8003800:	2b50      	cmp	r3, #80	; 0x50
 8003802:	d03c      	beq.n	800387e <HAL_TIM_ConfigClockSource+0xf6>
 8003804:	2b50      	cmp	r3, #80	; 0x50
 8003806:	d873      	bhi.n	80038f0 <HAL_TIM_ConfigClockSource+0x168>
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d058      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x136>
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d86f      	bhi.n	80038f0 <HAL_TIM_ConfigClockSource+0x168>
 8003810:	2b30      	cmp	r3, #48	; 0x30
 8003812:	d064      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x156>
 8003814:	2b30      	cmp	r3, #48	; 0x30
 8003816:	d86b      	bhi.n	80038f0 <HAL_TIM_ConfigClockSource+0x168>
 8003818:	2b20      	cmp	r3, #32
 800381a:	d060      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x156>
 800381c:	2b20      	cmp	r3, #32
 800381e:	d867      	bhi.n	80038f0 <HAL_TIM_ConfigClockSource+0x168>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d05c      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x156>
 8003824:	2b10      	cmp	r3, #16
 8003826:	d05a      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003828:	e062      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6899      	ldr	r1, [r3, #8]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f000 faee 	bl	8003e1a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800384c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	609a      	str	r2, [r3, #8]
      break;
 8003856:	e04e      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	6899      	ldr	r1, [r3, #8]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f000 fad7 	bl	8003e1a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800387a:	609a      	str	r2, [r3, #8]
      break;
 800387c:	e03b      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6859      	ldr	r1, [r3, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	461a      	mov	r2, r3
 800388c:	f000 fa4e 	bl	8003d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2150      	movs	r1, #80	; 0x50
 8003896:	4618      	mov	r0, r3
 8003898:	f000 faa5 	bl	8003de6 <TIM_ITRx_SetConfig>
      break;
 800389c:	e02b      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f000 fa6c 	bl	8003d88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2160      	movs	r1, #96	; 0x60
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fa95 	bl	8003de6 <TIM_ITRx_SetConfig>
      break;
 80038bc:	e01b      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f000 fa2e 	bl	8003d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2140      	movs	r1, #64	; 0x40
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fa85 	bl	8003de6 <TIM_ITRx_SetConfig>
      break;
 80038dc:	e00b      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f000 fa7c 	bl	8003de6 <TIM_ITRx_SetConfig>
        break;
 80038ee:	e002      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038f0:	bf00      	nop
 80038f2:	e000      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr

08003922 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr

08003934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr

08003946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a29      	ldr	r2, [pc, #164]	; (8003a10 <TIM_Base_SetConfig+0xb8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00b      	beq.n	8003988 <TIM_Base_SetConfig+0x30>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003976:	d007      	beq.n	8003988 <TIM_Base_SetConfig+0x30>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a26      	ldr	r2, [pc, #152]	; (8003a14 <TIM_Base_SetConfig+0xbc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d003      	beq.n	8003988 <TIM_Base_SetConfig+0x30>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a25      	ldr	r2, [pc, #148]	; (8003a18 <TIM_Base_SetConfig+0xc0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d108      	bne.n	800399a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <TIM_Base_SetConfig+0xb8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00b      	beq.n	80039ba <TIM_Base_SetConfig+0x62>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a8:	d007      	beq.n	80039ba <TIM_Base_SetConfig+0x62>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a19      	ldr	r2, [pc, #100]	; (8003a14 <TIM_Base_SetConfig+0xbc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d003      	beq.n	80039ba <TIM_Base_SetConfig+0x62>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a18      	ldr	r2, [pc, #96]	; (8003a18 <TIM_Base_SetConfig+0xc0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d108      	bne.n	80039cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a07      	ldr	r2, [pc, #28]	; (8003a10 <TIM_Base_SetConfig+0xb8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d103      	bne.n	8003a00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	615a      	str	r2, [r3, #20]
}
 8003a06:	bf00      	nop
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40000400 	.word	0x40000400
 8003a18:	40000800 	.word	0x40000800

08003a1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f023 0201 	bic.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0303 	bic.w	r3, r3, #3
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 0302 	bic.w	r3, r3, #2
 8003a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <TIM_OC1_SetConfig+0xc8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d10c      	bne.n	8003a92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f023 0308 	bic.w	r3, r3, #8
 8003a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f023 0304 	bic.w	r3, r3, #4
 8003a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <TIM_OC1_SetConfig+0xc8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d111      	bne.n	8003abe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	621a      	str	r2, [r3, #32]
}
 8003ad8:	bf00      	nop
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40012c00 	.word	0x40012c00

08003ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f023 0210 	bic.w	r2, r3, #16
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	021b      	lsls	r3, r3, #8
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f023 0320 	bic.w	r3, r3, #32
 8003b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a1d      	ldr	r2, [pc, #116]	; (8003bb8 <TIM_OC2_SetConfig+0xd0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d10d      	bne.n	8003b64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a14      	ldr	r2, [pc, #80]	; (8003bb8 <TIM_OC2_SetConfig+0xd0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d113      	bne.n	8003b94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	621a      	str	r2, [r3, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr
 8003bb8:	40012c00 	.word	0x40012c00

08003bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <TIM_OC3_SetConfig+0xd0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d10d      	bne.n	8003c36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a14      	ldr	r2, [pc, #80]	; (8003c8c <TIM_OC3_SetConfig+0xd0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d113      	bne.n	8003c66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	621a      	str	r2, [r3, #32]
}
 8003c80:	bf00      	nop
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40012c00 	.word	0x40012c00

08003c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	021b      	lsls	r3, r3, #8
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	031b      	lsls	r3, r3, #12
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a0f      	ldr	r2, [pc, #60]	; (8003d28 <TIM_OC4_SetConfig+0x98>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d109      	bne.n	8003d04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	019b      	lsls	r3, r3, #6
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	621a      	str	r2, [r3, #32]
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr
 8003d28:	40012c00 	.word	0x40012c00

08003d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f023 0201 	bic.w	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f023 030a 	bic.w	r3, r3, #10
 8003d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	f023 0210 	bic.w	r2, r3, #16
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003db2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	031b      	lsls	r3, r3, #12
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	621a      	str	r2, [r3, #32]
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr

08003de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f043 0307 	orr.w	r3, r3, #7
 8003e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	609a      	str	r2, [r3, #8]
}
 8003e10:	bf00      	nop
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr

08003e1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b087      	sub	sp, #28
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	021a      	lsls	r2, r3, #8
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	609a      	str	r2, [r3, #8]
}
 8003e4e:	bf00      	nop
 8003e50:	371c      	adds	r7, #28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr

08003e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1a      	ldr	r2, [r3, #32]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1a      	ldr	r2, [r3, #32]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f003 031f 	and.w	r3, r3, #31
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e90:	431a      	orrs	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e046      	b.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00e      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f04:	d009      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a12      	ldr	r2, [pc, #72]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d004      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a10      	ldr	r2, [pc, #64]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d10c      	bne.n	8003f34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000800 	.word	0x40000800

08003f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr

08003f6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <__libc_init_array>:
 8003f80:	b570      	push	{r4, r5, r6, lr}
 8003f82:	2600      	movs	r6, #0
 8003f84:	4d0c      	ldr	r5, [pc, #48]	; (8003fb8 <__libc_init_array+0x38>)
 8003f86:	4c0d      	ldr	r4, [pc, #52]	; (8003fbc <__libc_init_array+0x3c>)
 8003f88:	1b64      	subs	r4, r4, r5
 8003f8a:	10a4      	asrs	r4, r4, #2
 8003f8c:	42a6      	cmp	r6, r4
 8003f8e:	d109      	bne.n	8003fa4 <__libc_init_array+0x24>
 8003f90:	f000 f822 	bl	8003fd8 <_init>
 8003f94:	2600      	movs	r6, #0
 8003f96:	4d0a      	ldr	r5, [pc, #40]	; (8003fc0 <__libc_init_array+0x40>)
 8003f98:	4c0a      	ldr	r4, [pc, #40]	; (8003fc4 <__libc_init_array+0x44>)
 8003f9a:	1b64      	subs	r4, r4, r5
 8003f9c:	10a4      	asrs	r4, r4, #2
 8003f9e:	42a6      	cmp	r6, r4
 8003fa0:	d105      	bne.n	8003fae <__libc_init_array+0x2e>
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
 8003fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa8:	4798      	blx	r3
 8003faa:	3601      	adds	r6, #1
 8003fac:	e7ee      	b.n	8003f8c <__libc_init_array+0xc>
 8003fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb2:	4798      	blx	r3
 8003fb4:	3601      	adds	r6, #1
 8003fb6:	e7f2      	b.n	8003f9e <__libc_init_array+0x1e>
 8003fb8:	08004da8 	.word	0x08004da8
 8003fbc:	08004da8 	.word	0x08004da8
 8003fc0:	08004da8 	.word	0x08004da8
 8003fc4:	08004dac 	.word	0x08004dac

08003fc8 <memset>:
 8003fc8:	4603      	mov	r3, r0
 8003fca:	4402      	add	r2, r0
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d100      	bne.n	8003fd2 <memset+0xa>
 8003fd0:	4770      	bx	lr
 8003fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fd6:	e7f9      	b.n	8003fcc <memset+0x4>

08003fd8 <_init>:
 8003fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fda:	bf00      	nop
 8003fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fde:	bc08      	pop	{r3}
 8003fe0:	469e      	mov	lr, r3
 8003fe2:	4770      	bx	lr

08003fe4 <_fini>:
 8003fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe6:	bf00      	nop
 8003fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fea:	bc08      	pop	{r3}
 8003fec:	469e      	mov	lr, r3
 8003fee:	4770      	bx	lr
